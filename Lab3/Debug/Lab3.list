
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ffc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003108  08003108  00013108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800312c  0800312c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800312c  0800312c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800312c  0800312c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800312c  0800312c  0001312c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003130  08003130  00013130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003134  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  20000070  080031a4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  080031a4  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a1ca  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d5d  00000000  00000000  0002a263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  0002bfc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b00  00000000  00000000  0002cbe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000173ef  00000000  00000000  0002d6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d543  00000000  00000000  00044ad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082967  00000000  00000000  0005201a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d4981  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e88  00000000  00000000  000d49d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080030f0 	.word	0x080030f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080030f0 	.word	0x080030f0

0800014c <isButtonPressed>:
int KeyReg2[NUM_BUTTONS] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int KeyReg3[NUM_BUTTONS] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int timerforKeyPress[NUM_BUTTONS] = {200, 200, 200, 200};

// Hàm kiểm tra nếu một nút được nhấn
int isButtonPressed(int button_index) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (Button_flag[button_index] == 1) {
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		Button_flag[button_index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	2000008c 	.word	0x2000008c

08000180 <subKeyProcess>:

// Hàm đặt cờ cho việc nhấn nút
void subKeyProcess(int button_index) {
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	Button_flag[button_index] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	2000008c 	.word	0x2000008c

080001a0 <getKeyInput>:

// Hàm lấy đầu vào cho tất cả các nút
void getKeyInput() {
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b086      	sub	sp, #24
 80001a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_BUTTONS; i++) {
 80001a6:	2300      	movs	r3, #0
 80001a8:	617b      	str	r3, [r7, #20]
 80001aa:	e012      	b.n	80001d2 <getKeyInput+0x32>
		KeyReg0[i] = KeyReg1[i];
 80001ac:	4a61      	ldr	r2, [pc, #388]	; (8000334 <getKeyInput+0x194>)
 80001ae:	697b      	ldr	r3, [r7, #20]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	4960      	ldr	r1, [pc, #384]	; (8000338 <getKeyInput+0x198>)
 80001b6:	697b      	ldr	r3, [r7, #20]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 80001bc:	4a5f      	ldr	r2, [pc, #380]	; (800033c <getKeyInput+0x19c>)
 80001be:	697b      	ldr	r3, [r7, #20]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	495b      	ldr	r1, [pc, #364]	; (8000334 <getKeyInput+0x194>)
 80001c6:	697b      	ldr	r3, [r7, #20]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < NUM_BUTTONS; i++) {
 80001cc:	697b      	ldr	r3, [r7, #20]
 80001ce:	3301      	adds	r3, #1
 80001d0:	617b      	str	r3, [r7, #20]
 80001d2:	697b      	ldr	r3, [r7, #20]
 80001d4:	2b03      	cmp	r3, #3
 80001d6:	dde9      	ble.n	80001ac <getKeyInput+0xc>
	}

	// Đọc giá trị từng nút
	KeyReg2[0] = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80001d8:	2102      	movs	r1, #2
 80001da:	4859      	ldr	r0, [pc, #356]	; (8000340 <getKeyInput+0x1a0>)
 80001dc:	f001 ff5c 	bl	8002098 <HAL_GPIO_ReadPin>
 80001e0:	4603      	mov	r3, r0
 80001e2:	461a      	mov	r2, r3
 80001e4:	4b55      	ldr	r3, [pc, #340]	; (800033c <getKeyInput+0x19c>)
 80001e6:	601a      	str	r2, [r3, #0]
	KeyReg2[1] = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 80001e8:	2104      	movs	r1, #4
 80001ea:	4855      	ldr	r0, [pc, #340]	; (8000340 <getKeyInput+0x1a0>)
 80001ec:	f001 ff54 	bl	8002098 <HAL_GPIO_ReadPin>
 80001f0:	4603      	mov	r3, r0
 80001f2:	461a      	mov	r2, r3
 80001f4:	4b51      	ldr	r3, [pc, #324]	; (800033c <getKeyInput+0x19c>)
 80001f6:	605a      	str	r2, [r3, #4]
	KeyReg2[2] = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 80001f8:	2108      	movs	r1, #8
 80001fa:	4851      	ldr	r0, [pc, #324]	; (8000340 <getKeyInput+0x1a0>)
 80001fc:	f001 ff4c 	bl	8002098 <HAL_GPIO_ReadPin>
 8000200:	4603      	mov	r3, r0
 8000202:	461a      	mov	r2, r3
 8000204:	4b4d      	ldr	r3, [pc, #308]	; (800033c <getKeyInput+0x19c>)
 8000206:	609a      	str	r2, [r3, #8]
	KeyReg2[3] = HAL_GPIO_ReadPin(Button_Test_GPIO_Port, Button_Test_Pin);
 8000208:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800020c:	484c      	ldr	r0, [pc, #304]	; (8000340 <getKeyInput+0x1a0>)
 800020e:	f001 ff43 	bl	8002098 <HAL_GPIO_ReadPin>
 8000212:	4603      	mov	r3, r0
 8000214:	461a      	mov	r2, r3
 8000216:	4b49      	ldr	r3, [pc, #292]	; (800033c <getKeyInput+0x19c>)
 8000218:	60da      	str	r2, [r3, #12]

	for (int i = 0; i < NUM_BUTTONS; i++) {
 800021a:	2300      	movs	r3, #0
 800021c:	613b      	str	r3, [r7, #16]
 800021e:	e04c      	b.n	80002ba <getKeyInput+0x11a>
		// Kiểm tra nếu trạng thái ổn định
		int stableState = (KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i]);
 8000220:	4a45      	ldr	r2, [pc, #276]	; (8000338 <getKeyInput+0x198>)
 8000222:	693b      	ldr	r3, [r7, #16]
 8000224:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000228:	4942      	ldr	r1, [pc, #264]	; (8000334 <getKeyInput+0x194>)
 800022a:	693b      	ldr	r3, [r7, #16]
 800022c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000230:	429a      	cmp	r2, r3
 8000232:	d10b      	bne.n	800024c <getKeyInput+0xac>
 8000234:	4a3f      	ldr	r2, [pc, #252]	; (8000334 <getKeyInput+0x194>)
 8000236:	693b      	ldr	r3, [r7, #16]
 8000238:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800023c:	493f      	ldr	r1, [pc, #252]	; (800033c <getKeyInput+0x19c>)
 800023e:	693b      	ldr	r3, [r7, #16]
 8000240:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000244:	429a      	cmp	r2, r3
 8000246:	d101      	bne.n	800024c <getKeyInput+0xac>
 8000248:	2301      	movs	r3, #1
 800024a:	e000      	b.n	800024e <getKeyInput+0xae>
 800024c:	2300      	movs	r3, #0
 800024e:	607b      	str	r3, [r7, #4]

		// Kiểm tra sự thay đổi trạng thái của nút
		int stateChanged = stableState && (KeyReg3[i] != KeyReg2[i]);
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	2b00      	cmp	r3, #0
 8000254:	d00b      	beq.n	800026e <getKeyInput+0xce>
 8000256:	4a3b      	ldr	r2, [pc, #236]	; (8000344 <getKeyInput+0x1a4>)
 8000258:	693b      	ldr	r3, [r7, #16]
 800025a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800025e:	4937      	ldr	r1, [pc, #220]	; (800033c <getKeyInput+0x19c>)
 8000260:	693b      	ldr	r3, [r7, #16]
 8000262:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000266:	429a      	cmp	r2, r3
 8000268:	d001      	beq.n	800026e <getKeyInput+0xce>
 800026a:	2301      	movs	r3, #1
 800026c:	e000      	b.n	8000270 <getKeyInput+0xd0>
 800026e:	2300      	movs	r3, #0
 8000270:	603b      	str	r3, [r7, #0]
		KeyReg3[i] = stateChanged ? KeyReg2[i] : KeyReg3[i];
 8000272:	683b      	ldr	r3, [r7, #0]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d004      	beq.n	8000282 <getKeyInput+0xe2>
 8000278:	4a30      	ldr	r2, [pc, #192]	; (800033c <getKeyInput+0x19c>)
 800027a:	693b      	ldr	r3, [r7, #16]
 800027c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000280:	e003      	b.n	800028a <getKeyInput+0xea>
 8000282:	4a30      	ldr	r2, [pc, #192]	; (8000344 <getKeyInput+0x1a4>)
 8000284:	693b      	ldr	r3, [r7, #16]
 8000286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800028a:	492e      	ldr	r1, [pc, #184]	; (8000344 <getKeyInput+0x1a4>)
 800028c:	693a      	ldr	r2, [r7, #16]
 800028e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

		// Xử lý nhấn nút
		if (stateChanged && (KeyReg2[i] == PRESSED_STATE)) {
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d00d      	beq.n	80002b4 <getKeyInput+0x114>
 8000298:	4a28      	ldr	r2, [pc, #160]	; (800033c <getKeyInput+0x19c>)
 800029a:	693b      	ldr	r3, [r7, #16]
 800029c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d107      	bne.n	80002b4 <getKeyInput+0x114>
			subKeyProcess(i);
 80002a4:	6938      	ldr	r0, [r7, #16]
 80002a6:	f7ff ff6b 	bl	8000180 <subKeyProcess>
			timerforKeyPress[i] = 200;
 80002aa:	4a27      	ldr	r2, [pc, #156]	; (8000348 <getKeyInput+0x1a8>)
 80002ac:	693b      	ldr	r3, [r7, #16]
 80002ae:	21c8      	movs	r1, #200	; 0xc8
 80002b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_BUTTONS; i++) {
 80002b4:	693b      	ldr	r3, [r7, #16]
 80002b6:	3301      	adds	r3, #1
 80002b8:	613b      	str	r3, [r7, #16]
 80002ba:	693b      	ldr	r3, [r7, #16]
 80002bc:	2b03      	cmp	r3, #3
 80002be:	ddaf      	ble.n	8000220 <getKeyInput+0x80>
		}
	}

	for (int i = 0; i < NUM_BUTTONS; i++) {
 80002c0:	2300      	movs	r3, #0
 80002c2:	60fb      	str	r3, [r7, #12]
 80002c4:	e02e      	b.n	8000324 <getKeyInput+0x184>
		// Xử lý nhấn giữ (long press)
		int stablePressed = (KeyReg2[i] == PRESSED_STATE) && (timerforKeyPress[i] == 0);
 80002c6:	4a1d      	ldr	r2, [pc, #116]	; (800033c <getKeyInput+0x19c>)
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d107      	bne.n	80002e2 <getKeyInput+0x142>
 80002d2:	4a1d      	ldr	r2, [pc, #116]	; (8000348 <getKeyInput+0x1a8>)
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d101      	bne.n	80002e2 <getKeyInput+0x142>
 80002de:	2301      	movs	r3, #1
 80002e0:	e000      	b.n	80002e4 <getKeyInput+0x144>
 80002e2:	2300      	movs	r3, #0
 80002e4:	60bb      	str	r3, [r7, #8]
		if (stablePressed) {
 80002e6:	68bb      	ldr	r3, [r7, #8]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d007      	beq.n	80002fc <getKeyInput+0x15c>
			subKeyProcess(i);
 80002ec:	68f8      	ldr	r0, [r7, #12]
 80002ee:	f7ff ff47 	bl	8000180 <subKeyProcess>
			timerforKeyPress[i] = 200;
 80002f2:	4a15      	ldr	r2, [pc, #84]	; (8000348 <getKeyInput+0x1a8>)
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	21c8      	movs	r1, #200	; 0xc8
 80002f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
		// Giảm bộ đếm nếu nút đang được nhấn
		timerforKeyPress[i] = (KeyReg2[i] == PRESSED_STATE) ? timerforKeyPress[i] - 1 : 200;
 80002fc:	4a0f      	ldr	r2, [pc, #60]	; (800033c <getKeyInput+0x19c>)
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d105      	bne.n	8000314 <getKeyInput+0x174>
 8000308:	4a0f      	ldr	r2, [pc, #60]	; (8000348 <getKeyInput+0x1a8>)
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000310:	3b01      	subs	r3, #1
 8000312:	e000      	b.n	8000316 <getKeyInput+0x176>
 8000314:	23c8      	movs	r3, #200	; 0xc8
 8000316:	490c      	ldr	r1, [pc, #48]	; (8000348 <getKeyInput+0x1a8>)
 8000318:	68fa      	ldr	r2, [r7, #12]
 800031a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	for (int i = 0; i < NUM_BUTTONS; i++) {
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	3301      	adds	r3, #1
 8000322:	60fb      	str	r3, [r7, #12]
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	2b03      	cmp	r3, #3
 8000328:	ddcd      	ble.n	80002c6 <getKeyInput+0x126>
	}
}
 800032a:	bf00      	nop
 800032c:	bf00      	nop
 800032e:	3718      	adds	r7, #24
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	20000010 	.word	0x20000010
 8000338:	20000000 	.word	0x20000000
 800033c:	20000020 	.word	0x20000020
 8000340:	40010c00 	.word	0x40010c00
 8000344:	20000030 	.word	0x20000030
 8000348:	20000040 	.word	0x20000040

0800034c <fsm_automatic_run>:
 */

#include "fsm_automatic.h"
#include "global.h"

void fsm_automatic_run(){
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	switch(status){
 8000350:	4b94      	ldr	r3, [pc, #592]	; (80005a4 <fsm_automatic_run+0x258>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	3b01      	subs	r3, #1
 8000356:	2b04      	cmp	r3, #4
 8000358:	f200 8119 	bhi.w	800058e <fsm_automatic_run+0x242>
 800035c:	a201      	add	r2, pc, #4	; (adr r2, 8000364 <fsm_automatic_run+0x18>)
 800035e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000362:	bf00      	nop
 8000364:	08000379 	.word	0x08000379
 8000368:	08000393 	.word	0x08000393
 800036c:	08000411 	.word	0x08000411
 8000370:	08000493 	.word	0x08000493
 8000374:	0800050f 	.word	0x0800050f
		case INIT:
			setINIT();
 8000378:	f000 fba0 	bl	8000abc <setINIT>
			INIT_TIME();
 800037c:	f001 f8ae 	bl	80014dc <INIT_TIME>
			status = AUTO_RED1_GREEN2;
 8000380:	4b88      	ldr	r3, [pc, #544]	; (80005a4 <fsm_automatic_run+0x258>)
 8000382:	2202      	movs	r2, #2
 8000384:	601a      	str	r2, [r3, #0]
			setTimer(1, 1000);
 8000386:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800038a:	2001      	movs	r0, #1
 800038c:	f001 fb2a 	bl	80019e4 <setTimer>
			break;
 8000390:	e106      	b.n	80005a0 <fsm_automatic_run+0x254>
		case AUTO_RED1_GREEN2:
			red1_green2();
 8000392:	f001 f8b9 	bl	8001508 <red1_green2>
			set7seg2(red_time);
 8000396:	4b84      	ldr	r3, [pc, #528]	; (80005a8 <fsm_automatic_run+0x25c>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	4618      	mov	r0, r3
 800039c:	f000 ffa4 	bl	80012e8 <set7seg2>
			set7seg4(green_time);
 80003a0:	4b82      	ldr	r3, [pc, #520]	; (80005ac <fsm_automatic_run+0x260>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4618      	mov	r0, r3
 80003a6:	f001 f823 	bl	80013f0 <set7seg4>
			if(timer_flag[1] == 1){
 80003aa:	4b81      	ldr	r3, [pc, #516]	; (80005b0 <fsm_automatic_run+0x264>)
 80003ac:	685b      	ldr	r3, [r3, #4]
 80003ae:	2b01      	cmp	r3, #1
 80003b0:	d115      	bne.n	80003de <fsm_automatic_run+0x92>
				red_time --;
 80003b2:	4b7d      	ldr	r3, [pc, #500]	; (80005a8 <fsm_automatic_run+0x25c>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	3b01      	subs	r3, #1
 80003b8:	4a7b      	ldr	r2, [pc, #492]	; (80005a8 <fsm_automatic_run+0x25c>)
 80003ba:	6013      	str	r3, [r2, #0]
				green_time --;
 80003bc:	4b7b      	ldr	r3, [pc, #492]	; (80005ac <fsm_automatic_run+0x260>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	3b01      	subs	r3, #1
 80003c2:	4a7a      	ldr	r2, [pc, #488]	; (80005ac <fsm_automatic_run+0x260>)
 80003c4:	6013      	str	r3, [r2, #0]
				if(green_time == 0) status = AUTO_RED1_YELLOW2;
 80003c6:	4b79      	ldr	r3, [pc, #484]	; (80005ac <fsm_automatic_run+0x260>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d102      	bne.n	80003d4 <fsm_automatic_run+0x88>
 80003ce:	4b75      	ldr	r3, [pc, #468]	; (80005a4 <fsm_automatic_run+0x258>)
 80003d0:	2203      	movs	r2, #3
 80003d2:	601a      	str	r2, [r3, #0]
				setTimer(1, 1000);
 80003d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80003d8:	2001      	movs	r0, #1
 80003da:	f001 fb03 	bl	80019e4 <setTimer>
			}
			if(isButtonPressed(1) == 1){
 80003de:	2001      	movs	r0, #1
 80003e0:	f7ff feb4 	bl	800014c <isButtonPressed>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b01      	cmp	r3, #1
 80003e8:	f040 80d3 	bne.w	8000592 <fsm_automatic_run+0x246>
				setINIT();
 80003ec:	f000 fb66 	bl	8000abc <setINIT>
				status = MAN_RED;
 80003f0:	4b6c      	ldr	r3, [pc, #432]	; (80005a4 <fsm_automatic_run+0x258>)
 80003f2:	2206      	movs	r2, #6
 80003f4:	601a      	str	r2, [r3, #0]
				setTimer(1, 999999);
 80003f6:	496f      	ldr	r1, [pc, #444]	; (80005b4 <fsm_automatic_run+0x268>)
 80003f8:	2001      	movs	r0, #1
 80003fa:	f001 faf3 	bl	80019e4 <setTimer>
				setTimer(2, 50);
 80003fe:	2132      	movs	r1, #50	; 0x32
 8000400:	2002      	movs	r0, #2
 8000402:	f001 faef 	bl	80019e4 <setTimer>
				setTimer(3, 50);
 8000406:	2132      	movs	r1, #50	; 0x32
 8000408:	2003      	movs	r0, #3
 800040a:	f001 faeb 	bl	80019e4 <setTimer>
			}
			break;
 800040e:	e0c0      	b.n	8000592 <fsm_automatic_run+0x246>
		case AUTO_RED1_YELLOW2:
			red1_yellow2();
 8000410:	f001 f882 	bl	8001518 <red1_yellow2>
			set7seg2(red_time);
 8000414:	4b64      	ldr	r3, [pc, #400]	; (80005a8 <fsm_automatic_run+0x25c>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4618      	mov	r0, r3
 800041a:	f000 ff65 	bl	80012e8 <set7seg2>
			set7seg4(yellow_time);
 800041e:	4b66      	ldr	r3, [pc, #408]	; (80005b8 <fsm_automatic_run+0x26c>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4618      	mov	r0, r3
 8000424:	f000 ffe4 	bl	80013f0 <set7seg4>
			if(timer_flag[1] == 1){
 8000428:	4b61      	ldr	r3, [pc, #388]	; (80005b0 <fsm_automatic_run+0x264>)
 800042a:	685b      	ldr	r3, [r3, #4]
 800042c:	2b01      	cmp	r3, #1
 800042e:	d117      	bne.n	8000460 <fsm_automatic_run+0x114>
				red_time --;
 8000430:	4b5d      	ldr	r3, [pc, #372]	; (80005a8 <fsm_automatic_run+0x25c>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	3b01      	subs	r3, #1
 8000436:	4a5c      	ldr	r2, [pc, #368]	; (80005a8 <fsm_automatic_run+0x25c>)
 8000438:	6013      	str	r3, [r2, #0]
				yellow_time --;
 800043a:	4b5f      	ldr	r3, [pc, #380]	; (80005b8 <fsm_automatic_run+0x26c>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	3b01      	subs	r3, #1
 8000440:	4a5d      	ldr	r2, [pc, #372]	; (80005b8 <fsm_automatic_run+0x26c>)
 8000442:	6013      	str	r3, [r2, #0]
				if(yellow_time == 0){
 8000444:	4b5c      	ldr	r3, [pc, #368]	; (80005b8 <fsm_automatic_run+0x26c>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d104      	bne.n	8000456 <fsm_automatic_run+0x10a>
					INIT_TIME();
 800044c:	f001 f846 	bl	80014dc <INIT_TIME>
					status = AUTO_GREEN1_RED2;
 8000450:	4b54      	ldr	r3, [pc, #336]	; (80005a4 <fsm_automatic_run+0x258>)
 8000452:	2204      	movs	r2, #4
 8000454:	601a      	str	r2, [r3, #0]
				}
				setTimer(1, 1000);
 8000456:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800045a:	2001      	movs	r0, #1
 800045c:	f001 fac2 	bl	80019e4 <setTimer>
			}
			if(isButtonPressed(1) == 1){
 8000460:	2001      	movs	r0, #1
 8000462:	f7ff fe73 	bl	800014c <isButtonPressed>
 8000466:	4603      	mov	r3, r0
 8000468:	2b01      	cmp	r3, #1
 800046a:	f040 8094 	bne.w	8000596 <fsm_automatic_run+0x24a>
				setINIT();
 800046e:	f000 fb25 	bl	8000abc <setINIT>
				status = MAN_RED;
 8000472:	4b4c      	ldr	r3, [pc, #304]	; (80005a4 <fsm_automatic_run+0x258>)
 8000474:	2206      	movs	r2, #6
 8000476:	601a      	str	r2, [r3, #0]
				setTimer(1, 999999);
 8000478:	494e      	ldr	r1, [pc, #312]	; (80005b4 <fsm_automatic_run+0x268>)
 800047a:	2001      	movs	r0, #1
 800047c:	f001 fab2 	bl	80019e4 <setTimer>
				setTimer(2, 50);
 8000480:	2132      	movs	r1, #50	; 0x32
 8000482:	2002      	movs	r0, #2
 8000484:	f001 faae 	bl	80019e4 <setTimer>
				setTimer(3, 50);
 8000488:	2132      	movs	r1, #50	; 0x32
 800048a:	2003      	movs	r0, #3
 800048c:	f001 faaa 	bl	80019e4 <setTimer>
			}
			break;
 8000490:	e081      	b.n	8000596 <fsm_automatic_run+0x24a>
		case AUTO_GREEN1_RED2:
			green1_red2();
 8000492:	f001 f849 	bl	8001528 <green1_red2>
			set7seg2(green_time);
 8000496:	4b45      	ldr	r3, [pc, #276]	; (80005ac <fsm_automatic_run+0x260>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4618      	mov	r0, r3
 800049c:	f000 ff24 	bl	80012e8 <set7seg2>
			set7seg4(red_time);
 80004a0:	4b41      	ldr	r3, [pc, #260]	; (80005a8 <fsm_automatic_run+0x25c>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4618      	mov	r0, r3
 80004a6:	f000 ffa3 	bl	80013f0 <set7seg4>
			if(timer_flag[1] == 1){
 80004aa:	4b41      	ldr	r3, [pc, #260]	; (80005b0 <fsm_automatic_run+0x264>)
 80004ac:	685b      	ldr	r3, [r3, #4]
 80004ae:	2b01      	cmp	r3, #1
 80004b0:	d115      	bne.n	80004de <fsm_automatic_run+0x192>
				green_time --;
 80004b2:	4b3e      	ldr	r3, [pc, #248]	; (80005ac <fsm_automatic_run+0x260>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	3b01      	subs	r3, #1
 80004b8:	4a3c      	ldr	r2, [pc, #240]	; (80005ac <fsm_automatic_run+0x260>)
 80004ba:	6013      	str	r3, [r2, #0]
				red_time --;
 80004bc:	4b3a      	ldr	r3, [pc, #232]	; (80005a8 <fsm_automatic_run+0x25c>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	3b01      	subs	r3, #1
 80004c2:	4a39      	ldr	r2, [pc, #228]	; (80005a8 <fsm_automatic_run+0x25c>)
 80004c4:	6013      	str	r3, [r2, #0]
				if(green_time == 0) status = AUTO_YELLOW1_RED2;
 80004c6:	4b39      	ldr	r3, [pc, #228]	; (80005ac <fsm_automatic_run+0x260>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d102      	bne.n	80004d4 <fsm_automatic_run+0x188>
 80004ce:	4b35      	ldr	r3, [pc, #212]	; (80005a4 <fsm_automatic_run+0x258>)
 80004d0:	2205      	movs	r2, #5
 80004d2:	601a      	str	r2, [r3, #0]
				setTimer(1, 1000);
 80004d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004d8:	2001      	movs	r0, #1
 80004da:	f001 fa83 	bl	80019e4 <setTimer>
			}
			if(isButtonPressed(1) == 1){
 80004de:	2001      	movs	r0, #1
 80004e0:	f7ff fe34 	bl	800014c <isButtonPressed>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b01      	cmp	r3, #1
 80004e8:	d157      	bne.n	800059a <fsm_automatic_run+0x24e>
				setINIT();
 80004ea:	f000 fae7 	bl	8000abc <setINIT>
				status = MAN_RED;
 80004ee:	4b2d      	ldr	r3, [pc, #180]	; (80005a4 <fsm_automatic_run+0x258>)
 80004f0:	2206      	movs	r2, #6
 80004f2:	601a      	str	r2, [r3, #0]
				setTimer(1, 999999);
 80004f4:	492f      	ldr	r1, [pc, #188]	; (80005b4 <fsm_automatic_run+0x268>)
 80004f6:	2001      	movs	r0, #1
 80004f8:	f001 fa74 	bl	80019e4 <setTimer>
				setTimer(2, 50);
 80004fc:	2132      	movs	r1, #50	; 0x32
 80004fe:	2002      	movs	r0, #2
 8000500:	f001 fa70 	bl	80019e4 <setTimer>
				setTimer(3, 50);
 8000504:	2132      	movs	r1, #50	; 0x32
 8000506:	2003      	movs	r0, #3
 8000508:	f001 fa6c 	bl	80019e4 <setTimer>
			}
			break;
 800050c:	e045      	b.n	800059a <fsm_automatic_run+0x24e>
		case AUTO_YELLOW1_RED2:
			yellow1_red2();
 800050e:	f001 f813 	bl	8001538 <yellow1_red2>
			set7seg2(yellow_time);
 8000512:	4b29      	ldr	r3, [pc, #164]	; (80005b8 <fsm_automatic_run+0x26c>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4618      	mov	r0, r3
 8000518:	f000 fee6 	bl	80012e8 <set7seg2>
			set7seg4(red_time);
 800051c:	4b22      	ldr	r3, [pc, #136]	; (80005a8 <fsm_automatic_run+0x25c>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4618      	mov	r0, r3
 8000522:	f000 ff65 	bl	80013f0 <set7seg4>
			if(timer_flag[1] == 1){
 8000526:	4b22      	ldr	r3, [pc, #136]	; (80005b0 <fsm_automatic_run+0x264>)
 8000528:	685b      	ldr	r3, [r3, #4]
 800052a:	2b01      	cmp	r3, #1
 800052c:	d117      	bne.n	800055e <fsm_automatic_run+0x212>
				yellow_time --;
 800052e:	4b22      	ldr	r3, [pc, #136]	; (80005b8 <fsm_automatic_run+0x26c>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	3b01      	subs	r3, #1
 8000534:	4a20      	ldr	r2, [pc, #128]	; (80005b8 <fsm_automatic_run+0x26c>)
 8000536:	6013      	str	r3, [r2, #0]
				red_time --;
 8000538:	4b1b      	ldr	r3, [pc, #108]	; (80005a8 <fsm_automatic_run+0x25c>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	3b01      	subs	r3, #1
 800053e:	4a1a      	ldr	r2, [pc, #104]	; (80005a8 <fsm_automatic_run+0x25c>)
 8000540:	6013      	str	r3, [r2, #0]
				if(yellow_time == 0){
 8000542:	4b1d      	ldr	r3, [pc, #116]	; (80005b8 <fsm_automatic_run+0x26c>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d104      	bne.n	8000554 <fsm_automatic_run+0x208>
					INIT_TIME();
 800054a:	f000 ffc7 	bl	80014dc <INIT_TIME>
					status = AUTO_RED1_GREEN2;
 800054e:	4b15      	ldr	r3, [pc, #84]	; (80005a4 <fsm_automatic_run+0x258>)
 8000550:	2202      	movs	r2, #2
 8000552:	601a      	str	r2, [r3, #0]
				}
				setTimer(1, 1000);
 8000554:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000558:	2001      	movs	r0, #1
 800055a:	f001 fa43 	bl	80019e4 <setTimer>
			}
			if(isButtonPressed(1) == 1){
 800055e:	2001      	movs	r0, #1
 8000560:	f7ff fdf4 	bl	800014c <isButtonPressed>
 8000564:	4603      	mov	r3, r0
 8000566:	2b01      	cmp	r3, #1
 8000568:	d119      	bne.n	800059e <fsm_automatic_run+0x252>
				setINIT();
 800056a:	f000 faa7 	bl	8000abc <setINIT>
				status = MAN_RED;
 800056e:	4b0d      	ldr	r3, [pc, #52]	; (80005a4 <fsm_automatic_run+0x258>)
 8000570:	2206      	movs	r2, #6
 8000572:	601a      	str	r2, [r3, #0]
				setTimer(1, 999999);
 8000574:	490f      	ldr	r1, [pc, #60]	; (80005b4 <fsm_automatic_run+0x268>)
 8000576:	2001      	movs	r0, #1
 8000578:	f001 fa34 	bl	80019e4 <setTimer>
				setTimer(2, 50);
 800057c:	2132      	movs	r1, #50	; 0x32
 800057e:	2002      	movs	r0, #2
 8000580:	f001 fa30 	bl	80019e4 <setTimer>
				setTimer(3, 50);
 8000584:	2132      	movs	r1, #50	; 0x32
 8000586:	2003      	movs	r0, #3
 8000588:	f001 fa2c 	bl	80019e4 <setTimer>
			}
			break;
 800058c:	e007      	b.n	800059e <fsm_automatic_run+0x252>
		default:
			break;
 800058e:	bf00      	nop
 8000590:	e006      	b.n	80005a0 <fsm_automatic_run+0x254>
			break;
 8000592:	bf00      	nop
 8000594:	e004      	b.n	80005a0 <fsm_automatic_run+0x254>
			break;
 8000596:	bf00      	nop
 8000598:	e002      	b.n	80005a0 <fsm_automatic_run+0x254>
			break;
 800059a:	bf00      	nop
 800059c:	e000      	b.n	80005a0 <fsm_automatic_run+0x254>
			break;
 800059e:	bf00      	nop
	}
}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	2000009c 	.word	0x2000009c
 80005a8:	200000a4 	.word	0x200000a4
 80005ac:	200000a8 	.word	0x200000a8
 80005b0:	2000012c 	.word	0x2000012c
 80005b4:	000f423f 	.word	0x000f423f
 80005b8:	200000ac 	.word	0x200000ac

080005bc <fsm_manual_run>:
 */

#include "fsm_manual.h"
#include "global.h"

void fsm_manual_run(){
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	switch(status){
 80005c0:	4b8e      	ldr	r3, [pc, #568]	; (80007fc <fsm_manual_run+0x240>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2b08      	cmp	r3, #8
 80005c6:	f000 809c 	beq.w	8000702 <fsm_manual_run+0x146>
 80005ca:	2b08      	cmp	r3, #8
 80005cc:	f300 810f 	bgt.w	80007ee <fsm_manual_run+0x232>
 80005d0:	2b06      	cmp	r3, #6
 80005d2:	d002      	beq.n	80005da <fsm_manual_run+0x1e>
 80005d4:	2b07      	cmp	r3, #7
 80005d6:	d04a      	beq.n	800066e <fsm_manual_run+0xb2>
					status = AUTO_RED1_GREEN2;
					setTimer(1, 1000);
				}
			}
		default:
			break;
 80005d8:	e109      	b.n	80007ee <fsm_manual_run+0x232>
			set7seg2(2);
 80005da:	2002      	movs	r0, #2
 80005dc:	f000 fe84 	bl	80012e8 <set7seg2>
			if(timer_flag[2] == 1) {
 80005e0:	4b87      	ldr	r3, [pc, #540]	; (8000800 <fsm_manual_run+0x244>)
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d106      	bne.n	80005f6 <fsm_manual_run+0x3a>
				blinking_red();
 80005e8:	f000 ffae 	bl	8001548 <blinking_red>
				setTimer(2, 500);
 80005ec:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005f0:	2002      	movs	r0, #2
 80005f2:	f001 f9f7 	bl	80019e4 <setTimer>
			if(timer_flag[3] == 1){
 80005f6:	4b82      	ldr	r3, [pc, #520]	; (8000800 <fsm_manual_run+0x244>)
 80005f8:	68db      	ldr	r3, [r3, #12]
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d108      	bne.n	8000610 <fsm_manual_run+0x54>
				led7_segment_display_2(count);
 80005fe:	4b81      	ldr	r3, [pc, #516]	; (8000804 <fsm_manual_run+0x248>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4618      	mov	r0, r3
 8000604:	f000 ff36 	bl	8001474 <led7_segment_display_2>
				setTimer(3, 50);
 8000608:	2132      	movs	r1, #50	; 0x32
 800060a:	2003      	movs	r0, #3
 800060c:	f001 f9ea 	bl	80019e4 <setTimer>
			if(isButtonPressed(1) == 1){
 8000610:	2001      	movs	r0, #1
 8000612:	f7ff fd9b 	bl	800014c <isButtonPressed>
 8000616:	4603      	mov	r3, r0
 8000618:	2b01      	cmp	r3, #1
 800061a:	d107      	bne.n	800062c <fsm_manual_run+0x70>
				count = 1;
 800061c:	4b79      	ldr	r3, [pc, #484]	; (8000804 <fsm_manual_run+0x248>)
 800061e:	2201      	movs	r2, #1
 8000620:	601a      	str	r2, [r3, #0]
				setINIT();
 8000622:	f000 fa4b 	bl	8000abc <setINIT>
				status = MAN_GREEN;
 8000626:	4b75      	ldr	r3, [pc, #468]	; (80007fc <fsm_manual_run+0x240>)
 8000628:	2207      	movs	r2, #7
 800062a:	601a      	str	r2, [r3, #0]
			if(isButtonPressed(2) == 1){
 800062c:	2002      	movs	r0, #2
 800062e:	f7ff fd8d 	bl	800014c <isButtonPressed>
 8000632:	4603      	mov	r3, r0
 8000634:	2b01      	cmp	r3, #1
 8000636:	d10b      	bne.n	8000650 <fsm_manual_run+0x94>
				if (count > 99) {
 8000638:	4b72      	ldr	r3, [pc, #456]	; (8000804 <fsm_manual_run+0x248>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b63      	cmp	r3, #99	; 0x63
 800063e:	dd02      	ble.n	8000646 <fsm_manual_run+0x8a>
					count = 1;
 8000640:	4b70      	ldr	r3, [pc, #448]	; (8000804 <fsm_manual_run+0x248>)
 8000642:	2201      	movs	r2, #1
 8000644:	601a      	str	r2, [r3, #0]
				count++;
 8000646:	4b6f      	ldr	r3, [pc, #444]	; (8000804 <fsm_manual_run+0x248>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	3301      	adds	r3, #1
 800064c:	4a6d      	ldr	r2, [pc, #436]	; (8000804 <fsm_manual_run+0x248>)
 800064e:	6013      	str	r3, [r2, #0]
			if(isButtonPressed(3) == 1){
 8000650:	2003      	movs	r0, #3
 8000652:	f7ff fd7b 	bl	800014c <isButtonPressed>
 8000656:	4603      	mov	r3, r0
 8000658:	2b01      	cmp	r3, #1
 800065a:	f040 80ca 	bne.w	80007f2 <fsm_manual_run+0x236>
				new_red_time = count;
 800065e:	4b69      	ldr	r3, [pc, #420]	; (8000804 <fsm_manual_run+0x248>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a69      	ldr	r2, [pc, #420]	; (8000808 <fsm_manual_run+0x24c>)
 8000664:	6013      	str	r3, [r2, #0]
				count = 1;
 8000666:	4b67      	ldr	r3, [pc, #412]	; (8000804 <fsm_manual_run+0x248>)
 8000668:	2201      	movs	r2, #1
 800066a:	601a      	str	r2, [r3, #0]
			break;
 800066c:	e0c1      	b.n	80007f2 <fsm_manual_run+0x236>
			set7seg2(3);
 800066e:	2003      	movs	r0, #3
 8000670:	f000 fe3a 	bl	80012e8 <set7seg2>
			if(timer_flag[2] == 1){
 8000674:	4b62      	ldr	r3, [pc, #392]	; (8000800 <fsm_manual_run+0x244>)
 8000676:	689b      	ldr	r3, [r3, #8]
 8000678:	2b01      	cmp	r3, #1
 800067a:	d106      	bne.n	800068a <fsm_manual_run+0xce>
				blinking_green();
 800067c:	f000 ff74 	bl	8001568 <blinking_green>
				setTimer(2, 1000);
 8000680:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000684:	2002      	movs	r0, #2
 8000686:	f001 f9ad 	bl	80019e4 <setTimer>
			if(timer_flag[3] == 1){
 800068a:	4b5d      	ldr	r3, [pc, #372]	; (8000800 <fsm_manual_run+0x244>)
 800068c:	68db      	ldr	r3, [r3, #12]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d108      	bne.n	80006a4 <fsm_manual_run+0xe8>
				led7_segment_display_2(count);
 8000692:	4b5c      	ldr	r3, [pc, #368]	; (8000804 <fsm_manual_run+0x248>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4618      	mov	r0, r3
 8000698:	f000 feec 	bl	8001474 <led7_segment_display_2>
				setTimer(3, 50);
 800069c:	2132      	movs	r1, #50	; 0x32
 800069e:	2003      	movs	r0, #3
 80006a0:	f001 f9a0 	bl	80019e4 <setTimer>
			if(isButtonPressed(1) == 1){
 80006a4:	2001      	movs	r0, #1
 80006a6:	f7ff fd51 	bl	800014c <isButtonPressed>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d107      	bne.n	80006c0 <fsm_manual_run+0x104>
				count = 1;
 80006b0:	4b54      	ldr	r3, [pc, #336]	; (8000804 <fsm_manual_run+0x248>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	601a      	str	r2, [r3, #0]
				setINIT();
 80006b6:	f000 fa01 	bl	8000abc <setINIT>
				status = MAN_YELLOW;
 80006ba:	4b50      	ldr	r3, [pc, #320]	; (80007fc <fsm_manual_run+0x240>)
 80006bc:	2208      	movs	r2, #8
 80006be:	601a      	str	r2, [r3, #0]
			if(isButtonPressed(2) == 1){
 80006c0:	2002      	movs	r0, #2
 80006c2:	f7ff fd43 	bl	800014c <isButtonPressed>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d10b      	bne.n	80006e4 <fsm_manual_run+0x128>
				if (count > 99) {
 80006cc:	4b4d      	ldr	r3, [pc, #308]	; (8000804 <fsm_manual_run+0x248>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b63      	cmp	r3, #99	; 0x63
 80006d2:	dd02      	ble.n	80006da <fsm_manual_run+0x11e>
					count = 1;
 80006d4:	4b4b      	ldr	r3, [pc, #300]	; (8000804 <fsm_manual_run+0x248>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	601a      	str	r2, [r3, #0]
				count++;
 80006da:	4b4a      	ldr	r3, [pc, #296]	; (8000804 <fsm_manual_run+0x248>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	3301      	adds	r3, #1
 80006e0:	4a48      	ldr	r2, [pc, #288]	; (8000804 <fsm_manual_run+0x248>)
 80006e2:	6013      	str	r3, [r2, #0]
			if(isButtonPressed(3) == 1){
 80006e4:	2003      	movs	r0, #3
 80006e6:	f7ff fd31 	bl	800014c <isButtonPressed>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	f040 8082 	bne.w	80007f6 <fsm_manual_run+0x23a>
				new_green_time = count;
 80006f2:	4b44      	ldr	r3, [pc, #272]	; (8000804 <fsm_manual_run+0x248>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a45      	ldr	r2, [pc, #276]	; (800080c <fsm_manual_run+0x250>)
 80006f8:	6013      	str	r3, [r2, #0]
				count = 1;
 80006fa:	4b42      	ldr	r3, [pc, #264]	; (8000804 <fsm_manual_run+0x248>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	601a      	str	r2, [r3, #0]
			break;
 8000700:	e079      	b.n	80007f6 <fsm_manual_run+0x23a>
			set7seg2(4);
 8000702:	2004      	movs	r0, #4
 8000704:	f000 fdf0 	bl	80012e8 <set7seg2>
			if(timer_flag[2] == 1){
 8000708:	4b3d      	ldr	r3, [pc, #244]	; (8000800 <fsm_manual_run+0x244>)
 800070a:	689b      	ldr	r3, [r3, #8]
 800070c:	2b01      	cmp	r3, #1
 800070e:	d106      	bne.n	800071e <fsm_manual_run+0x162>
				blinking_yellow();
 8000710:	f000 ff3a 	bl	8001588 <blinking_yellow>
				setTimer(2, 1000);
 8000714:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000718:	2002      	movs	r0, #2
 800071a:	f001 f963 	bl	80019e4 <setTimer>
			if(timer_flag[3] == 1){
 800071e:	4b38      	ldr	r3, [pc, #224]	; (8000800 <fsm_manual_run+0x244>)
 8000720:	68db      	ldr	r3, [r3, #12]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d108      	bne.n	8000738 <fsm_manual_run+0x17c>
				led7_segment_display_2(count);
 8000726:	4b37      	ldr	r3, [pc, #220]	; (8000804 <fsm_manual_run+0x248>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4618      	mov	r0, r3
 800072c:	f000 fea2 	bl	8001474 <led7_segment_display_2>
				setTimer(3, 50);
 8000730:	2132      	movs	r1, #50	; 0x32
 8000732:	2003      	movs	r0, #3
 8000734:	f001 f956 	bl	80019e4 <setTimer>
			if(isButtonPressed(1) == 1){
 8000738:	2001      	movs	r0, #1
 800073a:	f7ff fd07 	bl	800014c <isButtonPressed>
 800073e:	4603      	mov	r3, r0
 8000740:	2b01      	cmp	r3, #1
 8000742:	d10e      	bne.n	8000762 <fsm_manual_run+0x1a6>
				count = 1;
 8000744:	4b2f      	ldr	r3, [pc, #188]	; (8000804 <fsm_manual_run+0x248>)
 8000746:	2201      	movs	r2, #1
 8000748:	601a      	str	r2, [r3, #0]
				INIT_TIME();
 800074a:	f000 fec7 	bl	80014dc <INIT_TIME>
				setINIT();
 800074e:	f000 f9b5 	bl	8000abc <setINIT>
				status = AUTO_RED1_GREEN2;
 8000752:	4b2a      	ldr	r3, [pc, #168]	; (80007fc <fsm_manual_run+0x240>)
 8000754:	2202      	movs	r2, #2
 8000756:	601a      	str	r2, [r3, #0]
				setTimer(1, 1000);
 8000758:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800075c:	2001      	movs	r0, #1
 800075e:	f001 f941 	bl	80019e4 <setTimer>
			if(isButtonPressed(2) == 1){
 8000762:	2002      	movs	r0, #2
 8000764:	f7ff fcf2 	bl	800014c <isButtonPressed>
 8000768:	4603      	mov	r3, r0
 800076a:	2b01      	cmp	r3, #1
 800076c:	d10b      	bne.n	8000786 <fsm_manual_run+0x1ca>
				if (count > 99) {
 800076e:	4b25      	ldr	r3, [pc, #148]	; (8000804 <fsm_manual_run+0x248>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2b63      	cmp	r3, #99	; 0x63
 8000774:	dd02      	ble.n	800077c <fsm_manual_run+0x1c0>
					count = 1;
 8000776:	4b23      	ldr	r3, [pc, #140]	; (8000804 <fsm_manual_run+0x248>)
 8000778:	2201      	movs	r2, #1
 800077a:	601a      	str	r2, [r3, #0]
				count++;
 800077c:	4b21      	ldr	r3, [pc, #132]	; (8000804 <fsm_manual_run+0x248>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	3301      	adds	r3, #1
 8000782:	4a20      	ldr	r2, [pc, #128]	; (8000804 <fsm_manual_run+0x248>)
 8000784:	6013      	str	r3, [r2, #0]
			if(isButtonPressed(3) == 1){
 8000786:	2003      	movs	r0, #3
 8000788:	f7ff fce0 	bl	800014c <isButtonPressed>
 800078c:	4603      	mov	r3, r0
 800078e:	2b01      	cmp	r3, #1
 8000790:	d12d      	bne.n	80007ee <fsm_manual_run+0x232>
				new_yellow_time = count;
 8000792:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <fsm_manual_run+0x248>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a1e      	ldr	r2, [pc, #120]	; (8000810 <fsm_manual_run+0x254>)
 8000798:	6013      	str	r3, [r2, #0]
				if(new_red_time = new_green_time + new_yellow_time){
 800079a:	4b1c      	ldr	r3, [pc, #112]	; (800080c <fsm_manual_run+0x250>)
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <fsm_manual_run+0x254>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4413      	add	r3, r2
 80007a4:	4a18      	ldr	r2, [pc, #96]	; (8000808 <fsm_manual_run+0x24c>)
 80007a6:	6013      	str	r3, [r2, #0]
 80007a8:	4b17      	ldr	r3, [pc, #92]	; (8000808 <fsm_manual_run+0x24c>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d00f      	beq.n	80007d0 <fsm_manual_run+0x214>
					INIT_TIME();
 80007b0:	f000 fe94 	bl	80014dc <INIT_TIME>
					count = 1;
 80007b4:	4b13      	ldr	r3, [pc, #76]	; (8000804 <fsm_manual_run+0x248>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	601a      	str	r2, [r3, #0]
					setINIT();
 80007ba:	f000 f97f 	bl	8000abc <setINIT>
					status = SETTING_INIT;
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <fsm_manual_run+0x240>)
 80007c0:	2209      	movs	r2, #9
 80007c2:	601a      	str	r2, [r3, #0]
					setTimer(1, 1000);
 80007c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007c8:	2001      	movs	r0, #1
 80007ca:	f001 f90b 	bl	80019e4 <setTimer>
			break;
 80007ce:	e00e      	b.n	80007ee <fsm_manual_run+0x232>
					INIT_TIME();
 80007d0:	f000 fe84 	bl	80014dc <INIT_TIME>
					count = 1;
 80007d4:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <fsm_manual_run+0x248>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	601a      	str	r2, [r3, #0]
					setINIT();
 80007da:	f000 f96f 	bl	8000abc <setINIT>
					status = AUTO_RED1_GREEN2;
 80007de:	4b07      	ldr	r3, [pc, #28]	; (80007fc <fsm_manual_run+0x240>)
 80007e0:	2202      	movs	r2, #2
 80007e2:	601a      	str	r2, [r3, #0]
					setTimer(1, 1000);
 80007e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007e8:	2001      	movs	r0, #1
 80007ea:	f001 f8fb 	bl	80019e4 <setTimer>
			break;
 80007ee:	bf00      	nop
 80007f0:	e002      	b.n	80007f8 <fsm_manual_run+0x23c>
			break;
 80007f2:	bf00      	nop
 80007f4:	e000      	b.n	80007f8 <fsm_manual_run+0x23c>
			break;
 80007f6:	bf00      	nop
	}
}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	2000009c 	.word	0x2000009c
 8000800:	2000012c 	.word	0x2000012c
 8000804:	20000050 	.word	0x20000050
 8000808:	20000054 	.word	0x20000054
 800080c:	20000058 	.word	0x20000058
 8000810:	2000005c 	.word	0x2000005c

08000814 <fsm_setting_run>:
 */

#include "fsm_setting.h"
#include "global.h"

void fsm_setting_run(){
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	switch(status){
 8000818:	4b9f      	ldr	r3, [pc, #636]	; (8000a98 <fsm_setting_run+0x284>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	3b09      	subs	r3, #9
 800081e:	2b04      	cmp	r3, #4
 8000820:	f200 812f 	bhi.w	8000a82 <fsm_setting_run+0x26e>
 8000824:	a201      	add	r2, pc, #4	; (adr r2, 800082c <fsm_setting_run+0x18>)
 8000826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800082a:	bf00      	nop
 800082c:	08000841 	.word	0x08000841
 8000830:	0800085f 	.word	0x0800085f
 8000834:	080008dd 	.word	0x080008dd
 8000838:	08000973 	.word	0x08000973
 800083c:	080009ef 	.word	0x080009ef
		case SETTING_INIT:
			const_x = new_red_time;
 8000840:	4b96      	ldr	r3, [pc, #600]	; (8000a9c <fsm_setting_run+0x288>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a96      	ldr	r2, [pc, #600]	; (8000aa0 <fsm_setting_run+0x28c>)
 8000846:	6013      	str	r3, [r2, #0]
			const_y = new_green_time;
 8000848:	4b96      	ldr	r3, [pc, #600]	; (8000aa4 <fsm_setting_run+0x290>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a96      	ldr	r2, [pc, #600]	; (8000aa8 <fsm_setting_run+0x294>)
 800084e:	6013      	str	r3, [r2, #0]
			const_z = new_yellow_time;
 8000850:	4b96      	ldr	r3, [pc, #600]	; (8000aac <fsm_setting_run+0x298>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a96      	ldr	r2, [pc, #600]	; (8000ab0 <fsm_setting_run+0x29c>)
 8000856:	6013      	str	r3, [r2, #0]
			status = SETTING_RED1_GREEN2;
 8000858:	4b8f      	ldr	r3, [pc, #572]	; (8000a98 <fsm_setting_run+0x284>)
 800085a:	220a      	movs	r2, #10
 800085c:	601a      	str	r2, [r3, #0]
		case SETTING_RED1_GREEN2:
			red1_green2();
 800085e:	f000 fe53 	bl	8001508 <red1_green2>
			set7seg2(new_red_time);
 8000862:	4b8e      	ldr	r3, [pc, #568]	; (8000a9c <fsm_setting_run+0x288>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4618      	mov	r0, r3
 8000868:	f000 fd3e 	bl	80012e8 <set7seg2>
			set7seg4(new_green_time);
 800086c:	4b8d      	ldr	r3, [pc, #564]	; (8000aa4 <fsm_setting_run+0x290>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4618      	mov	r0, r3
 8000872:	f000 fdbd 	bl	80013f0 <set7seg4>
			if(timer_flag[1] == 1){
 8000876:	4b8f      	ldr	r3, [pc, #572]	; (8000ab4 <fsm_setting_run+0x2a0>)
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	2b01      	cmp	r3, #1
 800087c:	d115      	bne.n	80008aa <fsm_setting_run+0x96>
				new_red_time --;
 800087e:	4b87      	ldr	r3, [pc, #540]	; (8000a9c <fsm_setting_run+0x288>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	3b01      	subs	r3, #1
 8000884:	4a85      	ldr	r2, [pc, #532]	; (8000a9c <fsm_setting_run+0x288>)
 8000886:	6013      	str	r3, [r2, #0]
				new_green_time --;
 8000888:	4b86      	ldr	r3, [pc, #536]	; (8000aa4 <fsm_setting_run+0x290>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	3b01      	subs	r3, #1
 800088e:	4a85      	ldr	r2, [pc, #532]	; (8000aa4 <fsm_setting_run+0x290>)
 8000890:	6013      	str	r3, [r2, #0]
				if(new_green_time == 0) status = SETTING_RED1_YELLOW2;
 8000892:	4b84      	ldr	r3, [pc, #528]	; (8000aa4 <fsm_setting_run+0x290>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d102      	bne.n	80008a0 <fsm_setting_run+0x8c>
 800089a:	4b7f      	ldr	r3, [pc, #508]	; (8000a98 <fsm_setting_run+0x284>)
 800089c:	220b      	movs	r2, #11
 800089e:	601a      	str	r2, [r3, #0]
				setTimer(1, 1000);
 80008a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008a4:	2001      	movs	r0, #1
 80008a6:	f001 f89d 	bl	80019e4 <setTimer>
			}
			if(isButtonPressed(1) == 1){
 80008aa:	2001      	movs	r0, #1
 80008ac:	f7ff fc4e 	bl	800014c <isButtonPressed>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	f040 80e7 	bne.w	8000a86 <fsm_setting_run+0x272>
				setINIT();
 80008b8:	f000 f900 	bl	8000abc <setINIT>
				status = MAN_RED;
 80008bc:	4b76      	ldr	r3, [pc, #472]	; (8000a98 <fsm_setting_run+0x284>)
 80008be:	2206      	movs	r2, #6
 80008c0:	601a      	str	r2, [r3, #0]
				setTimer(1, 999999);
 80008c2:	497d      	ldr	r1, [pc, #500]	; (8000ab8 <fsm_setting_run+0x2a4>)
 80008c4:	2001      	movs	r0, #1
 80008c6:	f001 f88d 	bl	80019e4 <setTimer>
				setTimer(2, 50);
 80008ca:	2132      	movs	r1, #50	; 0x32
 80008cc:	2002      	movs	r0, #2
 80008ce:	f001 f889 	bl	80019e4 <setTimer>
				setTimer(3, 50);
 80008d2:	2132      	movs	r1, #50	; 0x32
 80008d4:	2003      	movs	r0, #3
 80008d6:	f001 f885 	bl	80019e4 <setTimer>
			}
			break;
 80008da:	e0d4      	b.n	8000a86 <fsm_setting_run+0x272>
		case SETTING_RED1_YELLOW2:
			red1_yellow2();
 80008dc:	f000 fe1c 	bl	8001518 <red1_yellow2>
			set7seg2(new_red_time);
 80008e0:	4b6e      	ldr	r3, [pc, #440]	; (8000a9c <fsm_setting_run+0x288>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f000 fcff 	bl	80012e8 <set7seg2>
			set7seg4(new_yellow_time);
 80008ea:	4b70      	ldr	r3, [pc, #448]	; (8000aac <fsm_setting_run+0x298>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 fd7e 	bl	80013f0 <set7seg4>
			if(timer_flag[1] == 1){
 80008f4:	4b6f      	ldr	r3, [pc, #444]	; (8000ab4 <fsm_setting_run+0x2a0>)
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d121      	bne.n	8000940 <fsm_setting_run+0x12c>
				new_red_time --;
 80008fc:	4b67      	ldr	r3, [pc, #412]	; (8000a9c <fsm_setting_run+0x288>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	3b01      	subs	r3, #1
 8000902:	4a66      	ldr	r2, [pc, #408]	; (8000a9c <fsm_setting_run+0x288>)
 8000904:	6013      	str	r3, [r2, #0]
				new_yellow_time --;
 8000906:	4b69      	ldr	r3, [pc, #420]	; (8000aac <fsm_setting_run+0x298>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	3b01      	subs	r3, #1
 800090c:	4a67      	ldr	r2, [pc, #412]	; (8000aac <fsm_setting_run+0x298>)
 800090e:	6013      	str	r3, [r2, #0]
				if(new_yellow_time == 0){
 8000910:	4b66      	ldr	r3, [pc, #408]	; (8000aac <fsm_setting_run+0x298>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d10e      	bne.n	8000936 <fsm_setting_run+0x122>
					new_red_time = const_x;
 8000918:	4b61      	ldr	r3, [pc, #388]	; (8000aa0 <fsm_setting_run+0x28c>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a5f      	ldr	r2, [pc, #380]	; (8000a9c <fsm_setting_run+0x288>)
 800091e:	6013      	str	r3, [r2, #0]
				    new_green_time = const_y;
 8000920:	4b61      	ldr	r3, [pc, #388]	; (8000aa8 <fsm_setting_run+0x294>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a5f      	ldr	r2, [pc, #380]	; (8000aa4 <fsm_setting_run+0x290>)
 8000926:	6013      	str	r3, [r2, #0]
				    new_yellow_time = const_z;
 8000928:	4b61      	ldr	r3, [pc, #388]	; (8000ab0 <fsm_setting_run+0x29c>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a5f      	ldr	r2, [pc, #380]	; (8000aac <fsm_setting_run+0x298>)
 800092e:	6013      	str	r3, [r2, #0]
					status = SETTING_GREEN1_RED2;
 8000930:	4b59      	ldr	r3, [pc, #356]	; (8000a98 <fsm_setting_run+0x284>)
 8000932:	220c      	movs	r2, #12
 8000934:	601a      	str	r2, [r3, #0]
				}
				setTimer(1, 1000);
 8000936:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800093a:	2001      	movs	r0, #1
 800093c:	f001 f852 	bl	80019e4 <setTimer>
			}
			if(isButtonPressed(1) == 1){
 8000940:	2001      	movs	r0, #1
 8000942:	f7ff fc03 	bl	800014c <isButtonPressed>
 8000946:	4603      	mov	r3, r0
 8000948:	2b01      	cmp	r3, #1
 800094a:	f040 809e 	bne.w	8000a8a <fsm_setting_run+0x276>
				setINIT();
 800094e:	f000 f8b5 	bl	8000abc <setINIT>
				status = MAN_RED;
 8000952:	4b51      	ldr	r3, [pc, #324]	; (8000a98 <fsm_setting_run+0x284>)
 8000954:	2206      	movs	r2, #6
 8000956:	601a      	str	r2, [r3, #0]
				setTimer(1, 999999);
 8000958:	4957      	ldr	r1, [pc, #348]	; (8000ab8 <fsm_setting_run+0x2a4>)
 800095a:	2001      	movs	r0, #1
 800095c:	f001 f842 	bl	80019e4 <setTimer>
				setTimer(2, 50);
 8000960:	2132      	movs	r1, #50	; 0x32
 8000962:	2002      	movs	r0, #2
 8000964:	f001 f83e 	bl	80019e4 <setTimer>
				setTimer(3, 50);
 8000968:	2132      	movs	r1, #50	; 0x32
 800096a:	2003      	movs	r0, #3
 800096c:	f001 f83a 	bl	80019e4 <setTimer>
			}
			break;
 8000970:	e08b      	b.n	8000a8a <fsm_setting_run+0x276>
		case SETTING_GREEN1_RED2:
			green1_red2();
 8000972:	f000 fdd9 	bl	8001528 <green1_red2>
			set7seg2(new_green_time);
 8000976:	4b4b      	ldr	r3, [pc, #300]	; (8000aa4 <fsm_setting_run+0x290>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4618      	mov	r0, r3
 800097c:	f000 fcb4 	bl	80012e8 <set7seg2>
			set7seg4(new_red_time);
 8000980:	4b46      	ldr	r3, [pc, #280]	; (8000a9c <fsm_setting_run+0x288>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4618      	mov	r0, r3
 8000986:	f000 fd33 	bl	80013f0 <set7seg4>
			if(timer_flag[1] == 1){
 800098a:	4b4a      	ldr	r3, [pc, #296]	; (8000ab4 <fsm_setting_run+0x2a0>)
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	2b01      	cmp	r3, #1
 8000990:	d115      	bne.n	80009be <fsm_setting_run+0x1aa>
				new_green_time --;
 8000992:	4b44      	ldr	r3, [pc, #272]	; (8000aa4 <fsm_setting_run+0x290>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	3b01      	subs	r3, #1
 8000998:	4a42      	ldr	r2, [pc, #264]	; (8000aa4 <fsm_setting_run+0x290>)
 800099a:	6013      	str	r3, [r2, #0]
				new_red_time --;
 800099c:	4b3f      	ldr	r3, [pc, #252]	; (8000a9c <fsm_setting_run+0x288>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	3b01      	subs	r3, #1
 80009a2:	4a3e      	ldr	r2, [pc, #248]	; (8000a9c <fsm_setting_run+0x288>)
 80009a4:	6013      	str	r3, [r2, #0]
				if(new_green_time == 0) status = SETTING_YELLOW1_RED2;
 80009a6:	4b3f      	ldr	r3, [pc, #252]	; (8000aa4 <fsm_setting_run+0x290>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d102      	bne.n	80009b4 <fsm_setting_run+0x1a0>
 80009ae:	4b3a      	ldr	r3, [pc, #232]	; (8000a98 <fsm_setting_run+0x284>)
 80009b0:	220d      	movs	r2, #13
 80009b2:	601a      	str	r2, [r3, #0]
				setTimer(1, 1000);
 80009b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009b8:	2001      	movs	r0, #1
 80009ba:	f001 f813 	bl	80019e4 <setTimer>
			}
			if(isButtonPressed(1) == 1){
 80009be:	2001      	movs	r0, #1
 80009c0:	f7ff fbc4 	bl	800014c <isButtonPressed>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d161      	bne.n	8000a8e <fsm_setting_run+0x27a>
				setINIT();
 80009ca:	f000 f877 	bl	8000abc <setINIT>
				status = MAN_RED;
 80009ce:	4b32      	ldr	r3, [pc, #200]	; (8000a98 <fsm_setting_run+0x284>)
 80009d0:	2206      	movs	r2, #6
 80009d2:	601a      	str	r2, [r3, #0]
				setTimer(1, 999999);
 80009d4:	4938      	ldr	r1, [pc, #224]	; (8000ab8 <fsm_setting_run+0x2a4>)
 80009d6:	2001      	movs	r0, #1
 80009d8:	f001 f804 	bl	80019e4 <setTimer>
				setTimer(2, 50);
 80009dc:	2132      	movs	r1, #50	; 0x32
 80009de:	2002      	movs	r0, #2
 80009e0:	f001 f800 	bl	80019e4 <setTimer>
				setTimer(3, 50);
 80009e4:	2132      	movs	r1, #50	; 0x32
 80009e6:	2003      	movs	r0, #3
 80009e8:	f000 fffc 	bl	80019e4 <setTimer>
			}
			break;
 80009ec:	e04f      	b.n	8000a8e <fsm_setting_run+0x27a>
		case SETTING_YELLOW1_RED2:
			yellow1_red2();
 80009ee:	f000 fda3 	bl	8001538 <yellow1_red2>
			set7seg2(new_yellow_time);
 80009f2:	4b2e      	ldr	r3, [pc, #184]	; (8000aac <fsm_setting_run+0x298>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4618      	mov	r0, r3
 80009f8:	f000 fc76 	bl	80012e8 <set7seg2>
			set7seg4(new_red_time);
 80009fc:	4b27      	ldr	r3, [pc, #156]	; (8000a9c <fsm_setting_run+0x288>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f000 fcf5 	bl	80013f0 <set7seg4>
			if(timer_flag[1] == 1){
 8000a06:	4b2b      	ldr	r3, [pc, #172]	; (8000ab4 <fsm_setting_run+0x2a0>)
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d121      	bne.n	8000a52 <fsm_setting_run+0x23e>
				new_yellow_time --;
 8000a0e:	4b27      	ldr	r3, [pc, #156]	; (8000aac <fsm_setting_run+0x298>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	3b01      	subs	r3, #1
 8000a14:	4a25      	ldr	r2, [pc, #148]	; (8000aac <fsm_setting_run+0x298>)
 8000a16:	6013      	str	r3, [r2, #0]
				new_red_time --;
 8000a18:	4b20      	ldr	r3, [pc, #128]	; (8000a9c <fsm_setting_run+0x288>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	4a1f      	ldr	r2, [pc, #124]	; (8000a9c <fsm_setting_run+0x288>)
 8000a20:	6013      	str	r3, [r2, #0]
				if(new_yellow_time == 0){
 8000a22:	4b22      	ldr	r3, [pc, #136]	; (8000aac <fsm_setting_run+0x298>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d10e      	bne.n	8000a48 <fsm_setting_run+0x234>
					new_red_time = const_x;
 8000a2a:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <fsm_setting_run+0x28c>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a1b      	ldr	r2, [pc, #108]	; (8000a9c <fsm_setting_run+0x288>)
 8000a30:	6013      	str	r3, [r2, #0]
				    new_green_time = const_y;
 8000a32:	4b1d      	ldr	r3, [pc, #116]	; (8000aa8 <fsm_setting_run+0x294>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a1b      	ldr	r2, [pc, #108]	; (8000aa4 <fsm_setting_run+0x290>)
 8000a38:	6013      	str	r3, [r2, #0]
				    new_yellow_time = const_z;
 8000a3a:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <fsm_setting_run+0x29c>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a1b      	ldr	r2, [pc, #108]	; (8000aac <fsm_setting_run+0x298>)
 8000a40:	6013      	str	r3, [r2, #0]
					status = SETTING_RED1_GREEN2;
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <fsm_setting_run+0x284>)
 8000a44:	220a      	movs	r2, #10
 8000a46:	601a      	str	r2, [r3, #0]
				}
				setTimer(1, 1000);
 8000a48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	f000 ffc9 	bl	80019e4 <setTimer>
			}
			if(isButtonPressed(1) == 1){
 8000a52:	2001      	movs	r0, #1
 8000a54:	f7ff fb7a 	bl	800014c <isButtonPressed>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d119      	bne.n	8000a92 <fsm_setting_run+0x27e>
				setINIT();
 8000a5e:	f000 f82d 	bl	8000abc <setINIT>
				status = MAN_RED;
 8000a62:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <fsm_setting_run+0x284>)
 8000a64:	2206      	movs	r2, #6
 8000a66:	601a      	str	r2, [r3, #0]
				setTimer(1, 999999);
 8000a68:	4913      	ldr	r1, [pc, #76]	; (8000ab8 <fsm_setting_run+0x2a4>)
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	f000 ffba 	bl	80019e4 <setTimer>
				setTimer(2, 50);
 8000a70:	2132      	movs	r1, #50	; 0x32
 8000a72:	2002      	movs	r0, #2
 8000a74:	f000 ffb6 	bl	80019e4 <setTimer>
				setTimer(3, 50);
 8000a78:	2132      	movs	r1, #50	; 0x32
 8000a7a:	2003      	movs	r0, #3
 8000a7c:	f000 ffb2 	bl	80019e4 <setTimer>
			}
			break;
 8000a80:	e007      	b.n	8000a92 <fsm_setting_run+0x27e>
		default:
			break;
 8000a82:	bf00      	nop
 8000a84:	e006      	b.n	8000a94 <fsm_setting_run+0x280>
			break;
 8000a86:	bf00      	nop
 8000a88:	e004      	b.n	8000a94 <fsm_setting_run+0x280>
			break;
 8000a8a:	bf00      	nop
 8000a8c:	e002      	b.n	8000a94 <fsm_setting_run+0x280>
			break;
 8000a8e:	bf00      	nop
 8000a90:	e000      	b.n	8000a94 <fsm_setting_run+0x280>
			break;
 8000a92:	bf00      	nop
	}
}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	2000009c 	.word	0x2000009c
 8000a9c:	20000054 	.word	0x20000054
 8000aa0:	200000b0 	.word	0x200000b0
 8000aa4:	20000058 	.word	0x20000058
 8000aa8:	200000b4 	.word	0x200000b4
 8000aac:	2000005c 	.word	0x2000005c
 8000ab0:	200000b8 	.word	0x200000b8
 8000ab4:	2000012c 	.word	0x2000012c
 8000ab8:	000f423f 	.word	0x000f423f

08000abc <setINIT>:
int new_yellow_time = 2;
int const_x = 0;
int const_y = 0;
int const_z = 0;

void setINIT(){
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ac6:	4811      	ldr	r0, [pc, #68]	; (8000b0c <setINIT+0x50>)
 8000ac8:	f001 fafd 	bl	80020c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ad2:	480e      	ldr	r0, [pc, #56]	; (8000b0c <setINIT+0x50>)
 8000ad4:	f001 faf7 	bl	80020c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ade:	480b      	ldr	r0, [pc, #44]	; (8000b0c <setINIT+0x50>)
 8000ae0:	f001 faf1 	bl	80020c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aea:	4808      	ldr	r0, [pc, #32]	; (8000b0c <setINIT+0x50>)
 8000aec:	f001 faeb 	bl	80020c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_RESET);
 8000af0:	2200      	movs	r2, #0
 8000af2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000af6:	4805      	ldr	r0, [pc, #20]	; (8000b0c <setINIT+0x50>)
 8000af8:	f001 fae5 	bl	80020c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b02:	4802      	ldr	r0, [pc, #8]	; (8000b0c <setINIT+0x50>)
 8000b04:	f001 fadf 	bl	80020c6 <HAL_GPIO_WritePin>
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40010c00 	.word	0x40010c00

08000b10 <setRED1>:
void setRED1(){
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_SET);
 8000b14:	2201      	movs	r2, #1
 8000b16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b1a:	4808      	ldr	r0, [pc, #32]	; (8000b3c <setRED1+0x2c>)
 8000b1c:	f001 fad3 	bl	80020c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_RESET);
 8000b20:	2200      	movs	r2, #0
 8000b22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b26:	4805      	ldr	r0, [pc, #20]	; (8000b3c <setRED1+0x2c>)
 8000b28:	f001 facd 	bl	80020c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b32:	4802      	ldr	r0, [pc, #8]	; (8000b3c <setRED1+0x2c>)
 8000b34:	f001 fac7 	bl	80020c6 <HAL_GPIO_WritePin>
}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40010c00 	.word	0x40010c00

08000b40 <setGREEN1>:
void setGREEN1(){
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 8000b44:	2200      	movs	r2, #0
 8000b46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b4a:	4808      	ldr	r0, [pc, #32]	; (8000b6c <setGREEN1+0x2c>)
 8000b4c:	f001 fabb 	bl	80020c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_SET);
 8000b50:	2201      	movs	r2, #1
 8000b52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b56:	4805      	ldr	r0, [pc, #20]	; (8000b6c <setGREEN1+0x2c>)
 8000b58:	f001 fab5 	bl	80020c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b62:	4802      	ldr	r0, [pc, #8]	; (8000b6c <setGREEN1+0x2c>)
 8000b64:	f001 faaf 	bl	80020c6 <HAL_GPIO_WritePin>
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40010c00 	.word	0x40010c00

08000b70 <setYELLOW1>:
void setYELLOW1(){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b7a:	4808      	ldr	r0, [pc, #32]	; (8000b9c <setYELLOW1+0x2c>)
 8000b7c:	f001 faa3 	bl	80020c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <setYELLOW1+0x2c>)
 8000b88:	f001 fa9d 	bl	80020c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_SET);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b92:	4802      	ldr	r0, [pc, #8]	; (8000b9c <setYELLOW1+0x2c>)
 8000b94:	f001 fa97 	bl	80020c6 <HAL_GPIO_WritePin>
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40010c00 	.word	0x40010c00

08000ba0 <setRED2>:
void setRED2(){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_SET);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000baa:	4808      	ldr	r0, [pc, #32]	; (8000bcc <setRED2+0x2c>)
 8000bac:	f001 fa8b 	bl	80020c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bb6:	4805      	ldr	r0, [pc, #20]	; (8000bcc <setRED2+0x2c>)
 8000bb8:	f001 fa85 	bl	80020c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bc2:	4802      	ldr	r0, [pc, #8]	; (8000bcc <setRED2+0x2c>)
 8000bc4:	f001 fa7f 	bl	80020c6 <HAL_GPIO_WritePin>
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40010c00 	.word	0x40010c00

08000bd0 <setGREEN2>:
void setGREEN2(){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bda:	4808      	ldr	r0, [pc, #32]	; (8000bfc <setGREEN2+0x2c>)
 8000bdc:	f001 fa73 	bl	80020c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_SET);
 8000be0:	2201      	movs	r2, #1
 8000be2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000be6:	4805      	ldr	r0, [pc, #20]	; (8000bfc <setGREEN2+0x2c>)
 8000be8:	f001 fa6d 	bl	80020c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bf2:	4802      	ldr	r0, [pc, #8]	; (8000bfc <setGREEN2+0x2c>)
 8000bf4:	f001 fa67 	bl	80020c6 <HAL_GPIO_WritePin>
}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40010c00 	.word	0x40010c00

08000c00 <setYELLOW2>:
void setYELLOW2(){
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c0a:	4808      	ldr	r0, [pc, #32]	; (8000c2c <setYELLOW2+0x2c>)
 8000c0c:	f001 fa5b 	bl	80020c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_RESET);
 8000c10:	2200      	movs	r2, #0
 8000c12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c16:	4805      	ldr	r0, [pc, #20]	; (8000c2c <setYELLOW2+0x2c>)
 8000c18:	f001 fa55 	bl	80020c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_SET);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c22:	4802      	ldr	r0, [pc, #8]	; (8000c2c <setYELLOW2+0x2c>)
 8000c24:	f001 fa4f 	bl	80020c6 <HAL_GPIO_WritePin>
}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40010c00 	.word	0x40010c00

08000c30 <seg2_0>:
	HAL_GPIO_WritePin(LED_1_0_GPIO_Port, LED_1_0_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LED_1_1_GPIO_Port, LED_1_1_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LED_1_2_GPIO_Port, LED_1_2_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LED_1_3_GPIO_Port, LED_1_3_Pin, GPIO_PIN_SET);
}
void seg2_0() {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_2_0_GPIO_Port, LED_2_0_Pin, GPIO_PIN_RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2110      	movs	r1, #16
 8000c38:	4809      	ldr	r0, [pc, #36]	; (8000c60 <seg2_0+0x30>)
 8000c3a:	f001 fa44 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_1_GPIO_Port, LED_2_1_Pin, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2120      	movs	r1, #32
 8000c42:	4807      	ldr	r0, [pc, #28]	; (8000c60 <seg2_0+0x30>)
 8000c44:	f001 fa3f 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_2_GPIO_Port, LED_2_2_Pin, GPIO_PIN_RESET);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2140      	movs	r1, #64	; 0x40
 8000c4c:	4804      	ldr	r0, [pc, #16]	; (8000c60 <seg2_0+0x30>)
 8000c4e:	f001 fa3a 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_3_GPIO_Port, LED_2_3_Pin, GPIO_PIN_RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2180      	movs	r1, #128	; 0x80
 8000c56:	4802      	ldr	r0, [pc, #8]	; (8000c60 <seg2_0+0x30>)
 8000c58:	f001 fa35 	bl	80020c6 <HAL_GPIO_WritePin>
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40010800 	.word	0x40010800

08000c64 <seg2_1>:

void seg2_1() {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_2_0_GPIO_Port, LED_2_0_Pin, GPIO_PIN_SET);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	2110      	movs	r1, #16
 8000c6c:	4809      	ldr	r0, [pc, #36]	; (8000c94 <seg2_1+0x30>)
 8000c6e:	f001 fa2a 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_1_GPIO_Port, LED_2_1_Pin, GPIO_PIN_RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2120      	movs	r1, #32
 8000c76:	4807      	ldr	r0, [pc, #28]	; (8000c94 <seg2_1+0x30>)
 8000c78:	f001 fa25 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_2_GPIO_Port, LED_2_2_Pin, GPIO_PIN_RESET);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2140      	movs	r1, #64	; 0x40
 8000c80:	4804      	ldr	r0, [pc, #16]	; (8000c94 <seg2_1+0x30>)
 8000c82:	f001 fa20 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_3_GPIO_Port, LED_2_3_Pin, GPIO_PIN_RESET);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2180      	movs	r1, #128	; 0x80
 8000c8a:	4802      	ldr	r0, [pc, #8]	; (8000c94 <seg2_1+0x30>)
 8000c8c:	f001 fa1b 	bl	80020c6 <HAL_GPIO_WritePin>
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40010800 	.word	0x40010800

08000c98 <seg2_2>:

void seg2_2() {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_2_0_GPIO_Port, LED_2_0_Pin, GPIO_PIN_RESET);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2110      	movs	r1, #16
 8000ca0:	4809      	ldr	r0, [pc, #36]	; (8000cc8 <seg2_2+0x30>)
 8000ca2:	f001 fa10 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_1_GPIO_Port, LED_2_1_Pin, GPIO_PIN_SET);
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	2120      	movs	r1, #32
 8000caa:	4807      	ldr	r0, [pc, #28]	; (8000cc8 <seg2_2+0x30>)
 8000cac:	f001 fa0b 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_2_GPIO_Port, LED_2_2_Pin, GPIO_PIN_RESET);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2140      	movs	r1, #64	; 0x40
 8000cb4:	4804      	ldr	r0, [pc, #16]	; (8000cc8 <seg2_2+0x30>)
 8000cb6:	f001 fa06 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_3_GPIO_Port, LED_2_3_Pin, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2180      	movs	r1, #128	; 0x80
 8000cbe:	4802      	ldr	r0, [pc, #8]	; (8000cc8 <seg2_2+0x30>)
 8000cc0:	f001 fa01 	bl	80020c6 <HAL_GPIO_WritePin>
}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40010800 	.word	0x40010800

08000ccc <seg2_3>:

void seg2_3() {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_2_0_GPIO_Port, LED_2_0_Pin, GPIO_PIN_SET);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	2110      	movs	r1, #16
 8000cd4:	4809      	ldr	r0, [pc, #36]	; (8000cfc <seg2_3+0x30>)
 8000cd6:	f001 f9f6 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_1_GPIO_Port, LED_2_1_Pin, GPIO_PIN_SET);
 8000cda:	2201      	movs	r2, #1
 8000cdc:	2120      	movs	r1, #32
 8000cde:	4807      	ldr	r0, [pc, #28]	; (8000cfc <seg2_3+0x30>)
 8000ce0:	f001 f9f1 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_2_GPIO_Port, LED_2_2_Pin, GPIO_PIN_RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2140      	movs	r1, #64	; 0x40
 8000ce8:	4804      	ldr	r0, [pc, #16]	; (8000cfc <seg2_3+0x30>)
 8000cea:	f001 f9ec 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_3_GPIO_Port, LED_2_3_Pin, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2180      	movs	r1, #128	; 0x80
 8000cf2:	4802      	ldr	r0, [pc, #8]	; (8000cfc <seg2_3+0x30>)
 8000cf4:	f001 f9e7 	bl	80020c6 <HAL_GPIO_WritePin>
}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40010800 	.word	0x40010800

08000d00 <seg2_4>:

void seg2_4() {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_2_0_GPIO_Port, LED_2_0_Pin, GPIO_PIN_RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2110      	movs	r1, #16
 8000d08:	4809      	ldr	r0, [pc, #36]	; (8000d30 <seg2_4+0x30>)
 8000d0a:	f001 f9dc 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_1_GPIO_Port, LED_2_1_Pin, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2120      	movs	r1, #32
 8000d12:	4807      	ldr	r0, [pc, #28]	; (8000d30 <seg2_4+0x30>)
 8000d14:	f001 f9d7 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_2_GPIO_Port, LED_2_2_Pin, GPIO_PIN_SET);
 8000d18:	2201      	movs	r2, #1
 8000d1a:	2140      	movs	r1, #64	; 0x40
 8000d1c:	4804      	ldr	r0, [pc, #16]	; (8000d30 <seg2_4+0x30>)
 8000d1e:	f001 f9d2 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_3_GPIO_Port, LED_2_3_Pin, GPIO_PIN_RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2180      	movs	r1, #128	; 0x80
 8000d26:	4802      	ldr	r0, [pc, #8]	; (8000d30 <seg2_4+0x30>)
 8000d28:	f001 f9cd 	bl	80020c6 <HAL_GPIO_WritePin>
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40010800 	.word	0x40010800

08000d34 <seg2_5>:

void seg2_5() {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_2_0_GPIO_Port, LED_2_0_Pin, GPIO_PIN_SET);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	2110      	movs	r1, #16
 8000d3c:	4809      	ldr	r0, [pc, #36]	; (8000d64 <seg2_5+0x30>)
 8000d3e:	f001 f9c2 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_1_GPIO_Port, LED_2_1_Pin, GPIO_PIN_RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2120      	movs	r1, #32
 8000d46:	4807      	ldr	r0, [pc, #28]	; (8000d64 <seg2_5+0x30>)
 8000d48:	f001 f9bd 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_2_GPIO_Port, LED_2_2_Pin, GPIO_PIN_SET);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	2140      	movs	r1, #64	; 0x40
 8000d50:	4804      	ldr	r0, [pc, #16]	; (8000d64 <seg2_5+0x30>)
 8000d52:	f001 f9b8 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_3_GPIO_Port, LED_2_3_Pin, GPIO_PIN_RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2180      	movs	r1, #128	; 0x80
 8000d5a:	4802      	ldr	r0, [pc, #8]	; (8000d64 <seg2_5+0x30>)
 8000d5c:	f001 f9b3 	bl	80020c6 <HAL_GPIO_WritePin>
}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40010800 	.word	0x40010800

08000d68 <seg2_6>:

void seg2_6() {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_2_0_GPIO_Port, LED_2_0_Pin, GPIO_PIN_RESET);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2110      	movs	r1, #16
 8000d70:	4809      	ldr	r0, [pc, #36]	; (8000d98 <seg2_6+0x30>)
 8000d72:	f001 f9a8 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_1_GPIO_Port, LED_2_1_Pin, GPIO_PIN_SET);
 8000d76:	2201      	movs	r2, #1
 8000d78:	2120      	movs	r1, #32
 8000d7a:	4807      	ldr	r0, [pc, #28]	; (8000d98 <seg2_6+0x30>)
 8000d7c:	f001 f9a3 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_2_GPIO_Port, LED_2_2_Pin, GPIO_PIN_SET);
 8000d80:	2201      	movs	r2, #1
 8000d82:	2140      	movs	r1, #64	; 0x40
 8000d84:	4804      	ldr	r0, [pc, #16]	; (8000d98 <seg2_6+0x30>)
 8000d86:	f001 f99e 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_3_GPIO_Port, LED_2_3_Pin, GPIO_PIN_RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2180      	movs	r1, #128	; 0x80
 8000d8e:	4802      	ldr	r0, [pc, #8]	; (8000d98 <seg2_6+0x30>)
 8000d90:	f001 f999 	bl	80020c6 <HAL_GPIO_WritePin>
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40010800 	.word	0x40010800

08000d9c <seg2_7>:

void seg2_7() {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_2_0_GPIO_Port, LED_2_0_Pin, GPIO_PIN_SET);
 8000da0:	2201      	movs	r2, #1
 8000da2:	2110      	movs	r1, #16
 8000da4:	4809      	ldr	r0, [pc, #36]	; (8000dcc <seg2_7+0x30>)
 8000da6:	f001 f98e 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_1_GPIO_Port, LED_2_1_Pin, GPIO_PIN_SET);
 8000daa:	2201      	movs	r2, #1
 8000dac:	2120      	movs	r1, #32
 8000dae:	4807      	ldr	r0, [pc, #28]	; (8000dcc <seg2_7+0x30>)
 8000db0:	f001 f989 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_2_GPIO_Port, LED_2_2_Pin, GPIO_PIN_SET);
 8000db4:	2201      	movs	r2, #1
 8000db6:	2140      	movs	r1, #64	; 0x40
 8000db8:	4804      	ldr	r0, [pc, #16]	; (8000dcc <seg2_7+0x30>)
 8000dba:	f001 f984 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_3_GPIO_Port, LED_2_3_Pin, GPIO_PIN_RESET);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2180      	movs	r1, #128	; 0x80
 8000dc2:	4802      	ldr	r0, [pc, #8]	; (8000dcc <seg2_7+0x30>)
 8000dc4:	f001 f97f 	bl	80020c6 <HAL_GPIO_WritePin>
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40010800 	.word	0x40010800

08000dd0 <seg2_8>:

void seg2_8() {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_2_0_GPIO_Port, LED_2_0_Pin, GPIO_PIN_RESET);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2110      	movs	r1, #16
 8000dd8:	4809      	ldr	r0, [pc, #36]	; (8000e00 <seg2_8+0x30>)
 8000dda:	f001 f974 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_1_GPIO_Port, LED_2_1_Pin, GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2120      	movs	r1, #32
 8000de2:	4807      	ldr	r0, [pc, #28]	; (8000e00 <seg2_8+0x30>)
 8000de4:	f001 f96f 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_2_GPIO_Port, LED_2_2_Pin, GPIO_PIN_RESET);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2140      	movs	r1, #64	; 0x40
 8000dec:	4804      	ldr	r0, [pc, #16]	; (8000e00 <seg2_8+0x30>)
 8000dee:	f001 f96a 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_3_GPIO_Port, LED_2_3_Pin, GPIO_PIN_SET);
 8000df2:	2201      	movs	r2, #1
 8000df4:	2180      	movs	r1, #128	; 0x80
 8000df6:	4802      	ldr	r0, [pc, #8]	; (8000e00 <seg2_8+0x30>)
 8000df8:	f001 f965 	bl	80020c6 <HAL_GPIO_WritePin>
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40010800 	.word	0x40010800

08000e04 <seg2_9>:

void seg2_9() {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_2_0_GPIO_Port, LED_2_0_Pin, GPIO_PIN_SET);
 8000e08:	2201      	movs	r2, #1
 8000e0a:	2110      	movs	r1, #16
 8000e0c:	4809      	ldr	r0, [pc, #36]	; (8000e34 <seg2_9+0x30>)
 8000e0e:	f001 f95a 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_1_GPIO_Port, LED_2_1_Pin, GPIO_PIN_RESET);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2120      	movs	r1, #32
 8000e16:	4807      	ldr	r0, [pc, #28]	; (8000e34 <seg2_9+0x30>)
 8000e18:	f001 f955 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_2_GPIO_Port, LED_2_2_Pin, GPIO_PIN_RESET);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2140      	movs	r1, #64	; 0x40
 8000e20:	4804      	ldr	r0, [pc, #16]	; (8000e34 <seg2_9+0x30>)
 8000e22:	f001 f950 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_3_GPIO_Port, LED_2_3_Pin, GPIO_PIN_SET);
 8000e26:	2201      	movs	r2, #1
 8000e28:	2180      	movs	r1, #128	; 0x80
 8000e2a:	4802      	ldr	r0, [pc, #8]	; (8000e34 <seg2_9+0x30>)
 8000e2c:	f001 f94b 	bl	80020c6 <HAL_GPIO_WritePin>
}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40010800 	.word	0x40010800

08000e38 <seg3_0>:
void seg3_0() {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_3_0_GPIO_Port, LED_3_0_Pin, GPIO_PIN_RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e42:	480b      	ldr	r0, [pc, #44]	; (8000e70 <seg3_0+0x38>)
 8000e44:	f001 f93f 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_3_1_GPIO_Port, LED_3_1_Pin, GPIO_PIN_RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e4e:	4808      	ldr	r0, [pc, #32]	; (8000e70 <seg3_0+0x38>)
 8000e50:	f001 f939 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_3_2_GPIO_Port, LED_3_2_Pin, GPIO_PIN_RESET);
 8000e54:	2200      	movs	r2, #0
 8000e56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e5a:	4805      	ldr	r0, [pc, #20]	; (8000e70 <seg3_0+0x38>)
 8000e5c:	f001 f933 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_3_3_GPIO_Port, LED_3_3_Pin, GPIO_PIN_RESET);
 8000e60:	2200      	movs	r2, #0
 8000e62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e66:	4802      	ldr	r0, [pc, #8]	; (8000e70 <seg3_0+0x38>)
 8000e68:	f001 f92d 	bl	80020c6 <HAL_GPIO_WritePin>
}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40010800 	.word	0x40010800

08000e74 <seg3_1>:

void seg3_1() {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_3_0_GPIO_Port, LED_3_0_Pin, GPIO_PIN_SET);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e7e:	480b      	ldr	r0, [pc, #44]	; (8000eac <seg3_1+0x38>)
 8000e80:	f001 f921 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_3_1_GPIO_Port, LED_3_1_Pin, GPIO_PIN_RESET);
 8000e84:	2200      	movs	r2, #0
 8000e86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e8a:	4808      	ldr	r0, [pc, #32]	; (8000eac <seg3_1+0x38>)
 8000e8c:	f001 f91b 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_3_2_GPIO_Port, LED_3_2_Pin, GPIO_PIN_RESET);
 8000e90:	2200      	movs	r2, #0
 8000e92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e96:	4805      	ldr	r0, [pc, #20]	; (8000eac <seg3_1+0x38>)
 8000e98:	f001 f915 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_3_3_GPIO_Port, LED_3_3_Pin, GPIO_PIN_RESET);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ea2:	4802      	ldr	r0, [pc, #8]	; (8000eac <seg3_1+0x38>)
 8000ea4:	f001 f90f 	bl	80020c6 <HAL_GPIO_WritePin>
}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40010800 	.word	0x40010800

08000eb0 <seg3_2>:

void seg3_2() {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_3_0_GPIO_Port, LED_3_0_Pin, GPIO_PIN_RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eba:	480b      	ldr	r0, [pc, #44]	; (8000ee8 <seg3_2+0x38>)
 8000ebc:	f001 f903 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_3_1_GPIO_Port, LED_3_1_Pin, GPIO_PIN_SET);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ec6:	4808      	ldr	r0, [pc, #32]	; (8000ee8 <seg3_2+0x38>)
 8000ec8:	f001 f8fd 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_3_2_GPIO_Port, LED_3_2_Pin, GPIO_PIN_RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ed2:	4805      	ldr	r0, [pc, #20]	; (8000ee8 <seg3_2+0x38>)
 8000ed4:	f001 f8f7 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_3_3_GPIO_Port, LED_3_3_Pin, GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ede:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <seg3_2+0x38>)
 8000ee0:	f001 f8f1 	bl	80020c6 <HAL_GPIO_WritePin>
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40010800 	.word	0x40010800

08000eec <seg3_3>:

void seg3_3() {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_3_0_GPIO_Port, LED_3_0_Pin, GPIO_PIN_SET);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ef6:	480b      	ldr	r0, [pc, #44]	; (8000f24 <seg3_3+0x38>)
 8000ef8:	f001 f8e5 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_3_1_GPIO_Port, LED_3_1_Pin, GPIO_PIN_SET);
 8000efc:	2201      	movs	r2, #1
 8000efe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f02:	4808      	ldr	r0, [pc, #32]	; (8000f24 <seg3_3+0x38>)
 8000f04:	f001 f8df 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_3_2_GPIO_Port, LED_3_2_Pin, GPIO_PIN_RESET);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f0e:	4805      	ldr	r0, [pc, #20]	; (8000f24 <seg3_3+0x38>)
 8000f10:	f001 f8d9 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_3_3_GPIO_Port, LED_3_3_Pin, GPIO_PIN_RESET);
 8000f14:	2200      	movs	r2, #0
 8000f16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f1a:	4802      	ldr	r0, [pc, #8]	; (8000f24 <seg3_3+0x38>)
 8000f1c:	f001 f8d3 	bl	80020c6 <HAL_GPIO_WritePin>
}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40010800 	.word	0x40010800

08000f28 <seg3_4>:

void seg3_4() {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_3_0_GPIO_Port, LED_3_0_Pin, GPIO_PIN_RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f32:	480b      	ldr	r0, [pc, #44]	; (8000f60 <seg3_4+0x38>)
 8000f34:	f001 f8c7 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_3_1_GPIO_Port, LED_3_1_Pin, GPIO_PIN_RESET);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f3e:	4808      	ldr	r0, [pc, #32]	; (8000f60 <seg3_4+0x38>)
 8000f40:	f001 f8c1 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_3_2_GPIO_Port, LED_3_2_Pin, GPIO_PIN_SET);
 8000f44:	2201      	movs	r2, #1
 8000f46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f4a:	4805      	ldr	r0, [pc, #20]	; (8000f60 <seg3_4+0x38>)
 8000f4c:	f001 f8bb 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_3_3_GPIO_Port, LED_3_3_Pin, GPIO_PIN_RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f56:	4802      	ldr	r0, [pc, #8]	; (8000f60 <seg3_4+0x38>)
 8000f58:	f001 f8b5 	bl	80020c6 <HAL_GPIO_WritePin>
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40010800 	.word	0x40010800

08000f64 <seg3_5>:

void seg3_5() {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_3_0_GPIO_Port, LED_3_0_Pin, GPIO_PIN_SET);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f6e:	480b      	ldr	r0, [pc, #44]	; (8000f9c <seg3_5+0x38>)
 8000f70:	f001 f8a9 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_3_1_GPIO_Port, LED_3_1_Pin, GPIO_PIN_RESET);
 8000f74:	2200      	movs	r2, #0
 8000f76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f7a:	4808      	ldr	r0, [pc, #32]	; (8000f9c <seg3_5+0x38>)
 8000f7c:	f001 f8a3 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_3_2_GPIO_Port, LED_3_2_Pin, GPIO_PIN_SET);
 8000f80:	2201      	movs	r2, #1
 8000f82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f86:	4805      	ldr	r0, [pc, #20]	; (8000f9c <seg3_5+0x38>)
 8000f88:	f001 f89d 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_3_3_GPIO_Port, LED_3_3_Pin, GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f92:	4802      	ldr	r0, [pc, #8]	; (8000f9c <seg3_5+0x38>)
 8000f94:	f001 f897 	bl	80020c6 <HAL_GPIO_WritePin>
}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40010800 	.word	0x40010800

08000fa0 <seg3_6>:

void seg3_6() {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_3_0_GPIO_Port, LED_3_0_Pin, GPIO_PIN_RESET);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000faa:	480b      	ldr	r0, [pc, #44]	; (8000fd8 <seg3_6+0x38>)
 8000fac:	f001 f88b 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_3_1_GPIO_Port, LED_3_1_Pin, GPIO_PIN_SET);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fb6:	4808      	ldr	r0, [pc, #32]	; (8000fd8 <seg3_6+0x38>)
 8000fb8:	f001 f885 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_3_2_GPIO_Port, LED_3_2_Pin, GPIO_PIN_SET);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fc2:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <seg3_6+0x38>)
 8000fc4:	f001 f87f 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_3_3_GPIO_Port, LED_3_3_Pin, GPIO_PIN_RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fce:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <seg3_6+0x38>)
 8000fd0:	f001 f879 	bl	80020c6 <HAL_GPIO_WritePin>
}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40010800 	.word	0x40010800

08000fdc <seg3_7>:

void seg3_7() {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_3_0_GPIO_Port, LED_3_0_Pin, GPIO_PIN_SET);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fe6:	480b      	ldr	r0, [pc, #44]	; (8001014 <seg3_7+0x38>)
 8000fe8:	f001 f86d 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_3_1_GPIO_Port, LED_3_1_Pin, GPIO_PIN_SET);
 8000fec:	2201      	movs	r2, #1
 8000fee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ff2:	4808      	ldr	r0, [pc, #32]	; (8001014 <seg3_7+0x38>)
 8000ff4:	f001 f867 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_3_2_GPIO_Port, LED_3_2_Pin, GPIO_PIN_SET);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ffe:	4805      	ldr	r0, [pc, #20]	; (8001014 <seg3_7+0x38>)
 8001000:	f001 f861 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_3_3_GPIO_Port, LED_3_3_Pin, GPIO_PIN_RESET);
 8001004:	2200      	movs	r2, #0
 8001006:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800100a:	4802      	ldr	r0, [pc, #8]	; (8001014 <seg3_7+0x38>)
 800100c:	f001 f85b 	bl	80020c6 <HAL_GPIO_WritePin>
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40010800 	.word	0x40010800

08001018 <seg3_8>:

void seg3_8() {
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_3_0_GPIO_Port, LED_3_0_Pin, GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001022:	480b      	ldr	r0, [pc, #44]	; (8001050 <seg3_8+0x38>)
 8001024:	f001 f84f 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_3_1_GPIO_Port, LED_3_1_Pin, GPIO_PIN_RESET);
 8001028:	2200      	movs	r2, #0
 800102a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800102e:	4808      	ldr	r0, [pc, #32]	; (8001050 <seg3_8+0x38>)
 8001030:	f001 f849 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_3_2_GPIO_Port, LED_3_2_Pin, GPIO_PIN_RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800103a:	4805      	ldr	r0, [pc, #20]	; (8001050 <seg3_8+0x38>)
 800103c:	f001 f843 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_3_3_GPIO_Port, LED_3_3_Pin, GPIO_PIN_SET);
 8001040:	2201      	movs	r2, #1
 8001042:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001046:	4802      	ldr	r0, [pc, #8]	; (8001050 <seg3_8+0x38>)
 8001048:	f001 f83d 	bl	80020c6 <HAL_GPIO_WritePin>
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40010800 	.word	0x40010800

08001054 <seg3_9>:

void seg3_9() {
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_3_0_GPIO_Port, LED_3_0_Pin, GPIO_PIN_SET);
 8001058:	2201      	movs	r2, #1
 800105a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800105e:	480b      	ldr	r0, [pc, #44]	; (800108c <seg3_9+0x38>)
 8001060:	f001 f831 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_3_1_GPIO_Port, LED_3_1_Pin, GPIO_PIN_RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	f44f 7100 	mov.w	r1, #512	; 0x200
 800106a:	4808      	ldr	r0, [pc, #32]	; (800108c <seg3_9+0x38>)
 800106c:	f001 f82b 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_3_2_GPIO_Port, LED_3_2_Pin, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <seg3_9+0x38>)
 8001078:	f001 f825 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_3_3_GPIO_Port, LED_3_3_Pin, GPIO_PIN_SET);
 800107c:	2201      	movs	r2, #1
 800107e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001082:	4802      	ldr	r0, [pc, #8]	; (800108c <seg3_9+0x38>)
 8001084:	f001 f81f 	bl	80020c6 <HAL_GPIO_WritePin>
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40010800 	.word	0x40010800

08001090 <seg4_0>:
void seg4_0() {
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_4_0_GPIO_Port, LED_4_0_Pin, GPIO_PIN_RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800109a:	480b      	ldr	r0, [pc, #44]	; (80010c8 <seg4_0+0x38>)
 800109c:	f001 f813 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_4_1_GPIO_Port, LED_4_1_Pin, GPIO_PIN_RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010a6:	4808      	ldr	r0, [pc, #32]	; (80010c8 <seg4_0+0x38>)
 80010a8:	f001 f80d 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_4_2_GPIO_Port, LED_4_2_Pin, GPIO_PIN_RESET);
 80010ac:	2200      	movs	r2, #0
 80010ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010b2:	4805      	ldr	r0, [pc, #20]	; (80010c8 <seg4_0+0x38>)
 80010b4:	f001 f807 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_4_3_GPIO_Port, LED_4_3_Pin, GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010be:	4802      	ldr	r0, [pc, #8]	; (80010c8 <seg4_0+0x38>)
 80010c0:	f001 f801 	bl	80020c6 <HAL_GPIO_WritePin>
}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40010800 	.word	0x40010800

080010cc <seg4_1>:

void seg4_1() {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_4_0_GPIO_Port, LED_4_0_Pin, GPIO_PIN_SET);
 80010d0:	2201      	movs	r2, #1
 80010d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010d6:	480b      	ldr	r0, [pc, #44]	; (8001104 <seg4_1+0x38>)
 80010d8:	f000 fff5 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_4_1_GPIO_Port, LED_4_1_Pin, GPIO_PIN_RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010e2:	4808      	ldr	r0, [pc, #32]	; (8001104 <seg4_1+0x38>)
 80010e4:	f000 ffef 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_4_2_GPIO_Port, LED_4_2_Pin, GPIO_PIN_RESET);
 80010e8:	2200      	movs	r2, #0
 80010ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010ee:	4805      	ldr	r0, [pc, #20]	; (8001104 <seg4_1+0x38>)
 80010f0:	f000 ffe9 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_4_3_GPIO_Port, LED_4_3_Pin, GPIO_PIN_RESET);
 80010f4:	2200      	movs	r2, #0
 80010f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010fa:	4802      	ldr	r0, [pc, #8]	; (8001104 <seg4_1+0x38>)
 80010fc:	f000 ffe3 	bl	80020c6 <HAL_GPIO_WritePin>
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40010800 	.word	0x40010800

08001108 <seg4_2>:

void seg4_2() {
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_4_0_GPIO_Port, LED_4_0_Pin, GPIO_PIN_RESET);
 800110c:	2200      	movs	r2, #0
 800110e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001112:	480b      	ldr	r0, [pc, #44]	; (8001140 <seg4_2+0x38>)
 8001114:	f000 ffd7 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_4_1_GPIO_Port, LED_4_1_Pin, GPIO_PIN_SET);
 8001118:	2201      	movs	r2, #1
 800111a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800111e:	4808      	ldr	r0, [pc, #32]	; (8001140 <seg4_2+0x38>)
 8001120:	f000 ffd1 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_4_2_GPIO_Port, LED_4_2_Pin, GPIO_PIN_RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800112a:	4805      	ldr	r0, [pc, #20]	; (8001140 <seg4_2+0x38>)
 800112c:	f000 ffcb 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_4_3_GPIO_Port, LED_4_3_Pin, GPIO_PIN_RESET);
 8001130:	2200      	movs	r2, #0
 8001132:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001136:	4802      	ldr	r0, [pc, #8]	; (8001140 <seg4_2+0x38>)
 8001138:	f000 ffc5 	bl	80020c6 <HAL_GPIO_WritePin>
}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40010800 	.word	0x40010800

08001144 <seg4_3>:

void seg4_3() {
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_4_0_GPIO_Port, LED_4_0_Pin, GPIO_PIN_SET);
 8001148:	2201      	movs	r2, #1
 800114a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800114e:	480b      	ldr	r0, [pc, #44]	; (800117c <seg4_3+0x38>)
 8001150:	f000 ffb9 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_4_1_GPIO_Port, LED_4_1_Pin, GPIO_PIN_SET);
 8001154:	2201      	movs	r2, #1
 8001156:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800115a:	4808      	ldr	r0, [pc, #32]	; (800117c <seg4_3+0x38>)
 800115c:	f000 ffb3 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_4_2_GPIO_Port, LED_4_2_Pin, GPIO_PIN_RESET);
 8001160:	2200      	movs	r2, #0
 8001162:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001166:	4805      	ldr	r0, [pc, #20]	; (800117c <seg4_3+0x38>)
 8001168:	f000 ffad 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_4_3_GPIO_Port, LED_4_3_Pin, GPIO_PIN_RESET);
 800116c:	2200      	movs	r2, #0
 800116e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001172:	4802      	ldr	r0, [pc, #8]	; (800117c <seg4_3+0x38>)
 8001174:	f000 ffa7 	bl	80020c6 <HAL_GPIO_WritePin>
}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40010800 	.word	0x40010800

08001180 <seg4_4>:

void seg4_4() {
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_4_0_GPIO_Port, LED_4_0_Pin, GPIO_PIN_RESET);
 8001184:	2200      	movs	r2, #0
 8001186:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800118a:	480b      	ldr	r0, [pc, #44]	; (80011b8 <seg4_4+0x38>)
 800118c:	f000 ff9b 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_4_1_GPIO_Port, LED_4_1_Pin, GPIO_PIN_RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001196:	4808      	ldr	r0, [pc, #32]	; (80011b8 <seg4_4+0x38>)
 8001198:	f000 ff95 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_4_2_GPIO_Port, LED_4_2_Pin, GPIO_PIN_SET);
 800119c:	2201      	movs	r2, #1
 800119e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011a2:	4805      	ldr	r0, [pc, #20]	; (80011b8 <seg4_4+0x38>)
 80011a4:	f000 ff8f 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_4_3_GPIO_Port, LED_4_3_Pin, GPIO_PIN_RESET);
 80011a8:	2200      	movs	r2, #0
 80011aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011ae:	4802      	ldr	r0, [pc, #8]	; (80011b8 <seg4_4+0x38>)
 80011b0:	f000 ff89 	bl	80020c6 <HAL_GPIO_WritePin>
}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40010800 	.word	0x40010800

080011bc <seg4_5>:

void seg4_5() {
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_4_0_GPIO_Port, LED_4_0_Pin, GPIO_PIN_SET);
 80011c0:	2201      	movs	r2, #1
 80011c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011c6:	480b      	ldr	r0, [pc, #44]	; (80011f4 <seg4_5+0x38>)
 80011c8:	f000 ff7d 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_4_1_GPIO_Port, LED_4_1_Pin, GPIO_PIN_RESET);
 80011cc:	2200      	movs	r2, #0
 80011ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011d2:	4808      	ldr	r0, [pc, #32]	; (80011f4 <seg4_5+0x38>)
 80011d4:	f000 ff77 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_4_2_GPIO_Port, LED_4_2_Pin, GPIO_PIN_SET);
 80011d8:	2201      	movs	r2, #1
 80011da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011de:	4805      	ldr	r0, [pc, #20]	; (80011f4 <seg4_5+0x38>)
 80011e0:	f000 ff71 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_4_3_GPIO_Port, LED_4_3_Pin, GPIO_PIN_RESET);
 80011e4:	2200      	movs	r2, #0
 80011e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011ea:	4802      	ldr	r0, [pc, #8]	; (80011f4 <seg4_5+0x38>)
 80011ec:	f000 ff6b 	bl	80020c6 <HAL_GPIO_WritePin>
}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40010800 	.word	0x40010800

080011f8 <seg4_6>:

void seg4_6() {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_4_0_GPIO_Port, LED_4_0_Pin, GPIO_PIN_RESET);
 80011fc:	2200      	movs	r2, #0
 80011fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001202:	480b      	ldr	r0, [pc, #44]	; (8001230 <seg4_6+0x38>)
 8001204:	f000 ff5f 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_4_1_GPIO_Port, LED_4_1_Pin, GPIO_PIN_SET);
 8001208:	2201      	movs	r2, #1
 800120a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800120e:	4808      	ldr	r0, [pc, #32]	; (8001230 <seg4_6+0x38>)
 8001210:	f000 ff59 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_4_2_GPIO_Port, LED_4_2_Pin, GPIO_PIN_SET);
 8001214:	2201      	movs	r2, #1
 8001216:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800121a:	4805      	ldr	r0, [pc, #20]	; (8001230 <seg4_6+0x38>)
 800121c:	f000 ff53 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_4_3_GPIO_Port, LED_4_3_Pin, GPIO_PIN_RESET);
 8001220:	2200      	movs	r2, #0
 8001222:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001226:	4802      	ldr	r0, [pc, #8]	; (8001230 <seg4_6+0x38>)
 8001228:	f000 ff4d 	bl	80020c6 <HAL_GPIO_WritePin>
}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40010800 	.word	0x40010800

08001234 <seg4_7>:

void seg4_7() {
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_4_0_GPIO_Port, LED_4_0_Pin, GPIO_PIN_SET);
 8001238:	2201      	movs	r2, #1
 800123a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800123e:	480b      	ldr	r0, [pc, #44]	; (800126c <seg4_7+0x38>)
 8001240:	f000 ff41 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_4_1_GPIO_Port, LED_4_1_Pin, GPIO_PIN_SET);
 8001244:	2201      	movs	r2, #1
 8001246:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800124a:	4808      	ldr	r0, [pc, #32]	; (800126c <seg4_7+0x38>)
 800124c:	f000 ff3b 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_4_2_GPIO_Port, LED_4_2_Pin, GPIO_PIN_SET);
 8001250:	2201      	movs	r2, #1
 8001252:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001256:	4805      	ldr	r0, [pc, #20]	; (800126c <seg4_7+0x38>)
 8001258:	f000 ff35 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_4_3_GPIO_Port, LED_4_3_Pin, GPIO_PIN_RESET);
 800125c:	2200      	movs	r2, #0
 800125e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001262:	4802      	ldr	r0, [pc, #8]	; (800126c <seg4_7+0x38>)
 8001264:	f000 ff2f 	bl	80020c6 <HAL_GPIO_WritePin>
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40010800 	.word	0x40010800

08001270 <seg4_8>:

void seg4_8() {
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_4_0_GPIO_Port, LED_4_0_Pin, GPIO_PIN_RESET);
 8001274:	2200      	movs	r2, #0
 8001276:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800127a:	480b      	ldr	r0, [pc, #44]	; (80012a8 <seg4_8+0x38>)
 800127c:	f000 ff23 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_4_1_GPIO_Port, LED_4_1_Pin, GPIO_PIN_RESET);
 8001280:	2200      	movs	r2, #0
 8001282:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001286:	4808      	ldr	r0, [pc, #32]	; (80012a8 <seg4_8+0x38>)
 8001288:	f000 ff1d 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_4_2_GPIO_Port, LED_4_2_Pin, GPIO_PIN_RESET);
 800128c:	2200      	movs	r2, #0
 800128e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001292:	4805      	ldr	r0, [pc, #20]	; (80012a8 <seg4_8+0x38>)
 8001294:	f000 ff17 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_4_3_GPIO_Port, LED_4_3_Pin, GPIO_PIN_SET);
 8001298:	2201      	movs	r2, #1
 800129a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800129e:	4802      	ldr	r0, [pc, #8]	; (80012a8 <seg4_8+0x38>)
 80012a0:	f000 ff11 	bl	80020c6 <HAL_GPIO_WritePin>
}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40010800 	.word	0x40010800

080012ac <seg4_9>:

void seg4_9() {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_4_0_GPIO_Port, LED_4_0_Pin, GPIO_PIN_SET);
 80012b0:	2201      	movs	r2, #1
 80012b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012b6:	480b      	ldr	r0, [pc, #44]	; (80012e4 <seg4_9+0x38>)
 80012b8:	f000 ff05 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_4_1_GPIO_Port, LED_4_1_Pin, GPIO_PIN_RESET);
 80012bc:	2200      	movs	r2, #0
 80012be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012c2:	4808      	ldr	r0, [pc, #32]	; (80012e4 <seg4_9+0x38>)
 80012c4:	f000 feff 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_4_2_GPIO_Port, LED_4_2_Pin, GPIO_PIN_RESET);
 80012c8:	2200      	movs	r2, #0
 80012ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012ce:	4805      	ldr	r0, [pc, #20]	; (80012e4 <seg4_9+0x38>)
 80012d0:	f000 fef9 	bl	80020c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_4_3_GPIO_Port, LED_4_3_Pin, GPIO_PIN_SET);
 80012d4:	2201      	movs	r2, #1
 80012d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012da:	4802      	ldr	r0, [pc, #8]	; (80012e4 <seg4_9+0x38>)
 80012dc:	f000 fef3 	bl	80020c6 <HAL_GPIO_WritePin>
}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40010800 	.word	0x40010800

080012e8 <set7seg2>:
        default:
            break;
    }
}

void set7seg2(int value) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b09      	cmp	r3, #9
 80012f4:	d834      	bhi.n	8001360 <set7seg2+0x78>
 80012f6:	a201      	add	r2, pc, #4	; (adr r2, 80012fc <set7seg2+0x14>)
 80012f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012fc:	08001325 	.word	0x08001325
 8001300:	0800132b 	.word	0x0800132b
 8001304:	08001331 	.word	0x08001331
 8001308:	08001337 	.word	0x08001337
 800130c:	0800133d 	.word	0x0800133d
 8001310:	08001343 	.word	0x08001343
 8001314:	08001349 	.word	0x08001349
 8001318:	0800134f 	.word	0x0800134f
 800131c:	08001355 	.word	0x08001355
 8001320:	0800135b 	.word	0x0800135b
    switch (value) {
        case 0:
            seg2_0();
 8001324:	f7ff fc84 	bl	8000c30 <seg2_0>
            break;
 8001328:	e01b      	b.n	8001362 <set7seg2+0x7a>
        case 1:
            seg2_1();
 800132a:	f7ff fc9b 	bl	8000c64 <seg2_1>
            break;
 800132e:	e018      	b.n	8001362 <set7seg2+0x7a>
        case 2:
            seg2_2();
 8001330:	f7ff fcb2 	bl	8000c98 <seg2_2>
            break;
 8001334:	e015      	b.n	8001362 <set7seg2+0x7a>
        case 3:
            seg2_3();
 8001336:	f7ff fcc9 	bl	8000ccc <seg2_3>
            break;
 800133a:	e012      	b.n	8001362 <set7seg2+0x7a>
        case 4:
            seg2_4();
 800133c:	f7ff fce0 	bl	8000d00 <seg2_4>
            break;
 8001340:	e00f      	b.n	8001362 <set7seg2+0x7a>
        case 5:
            seg2_5();
 8001342:	f7ff fcf7 	bl	8000d34 <seg2_5>
            break;
 8001346:	e00c      	b.n	8001362 <set7seg2+0x7a>
        case 6:
            seg2_6();
 8001348:	f7ff fd0e 	bl	8000d68 <seg2_6>
            break;
 800134c:	e009      	b.n	8001362 <set7seg2+0x7a>
        case 7:
            seg2_7();
 800134e:	f7ff fd25 	bl	8000d9c <seg2_7>
            break;
 8001352:	e006      	b.n	8001362 <set7seg2+0x7a>
        case 8:
            seg2_8();
 8001354:	f7ff fd3c 	bl	8000dd0 <seg2_8>
            break;
 8001358:	e003      	b.n	8001362 <set7seg2+0x7a>
        case 9:
            seg2_9();
 800135a:	f7ff fd53 	bl	8000e04 <seg2_9>
            break;
 800135e:	e000      	b.n	8001362 <set7seg2+0x7a>
        default:
            break;
 8001360:	bf00      	nop
    }
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop

0800136c <set7seg3>:

void set7seg3(int value) {
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b09      	cmp	r3, #9
 8001378:	d834      	bhi.n	80013e4 <set7seg3+0x78>
 800137a:	a201      	add	r2, pc, #4	; (adr r2, 8001380 <set7seg3+0x14>)
 800137c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001380:	080013a9 	.word	0x080013a9
 8001384:	080013af 	.word	0x080013af
 8001388:	080013b5 	.word	0x080013b5
 800138c:	080013bb 	.word	0x080013bb
 8001390:	080013c1 	.word	0x080013c1
 8001394:	080013c7 	.word	0x080013c7
 8001398:	080013cd 	.word	0x080013cd
 800139c:	080013d3 	.word	0x080013d3
 80013a0:	080013d9 	.word	0x080013d9
 80013a4:	080013df 	.word	0x080013df
    switch (value) {
        case 0:
            seg3_0();
 80013a8:	f7ff fd46 	bl	8000e38 <seg3_0>
            break;
 80013ac:	e01b      	b.n	80013e6 <set7seg3+0x7a>
        case 1:
            seg3_1();
 80013ae:	f7ff fd61 	bl	8000e74 <seg3_1>
            break;
 80013b2:	e018      	b.n	80013e6 <set7seg3+0x7a>
        case 2:
            seg3_2();
 80013b4:	f7ff fd7c 	bl	8000eb0 <seg3_2>
            break;
 80013b8:	e015      	b.n	80013e6 <set7seg3+0x7a>
        case 3:
            seg3_3();
 80013ba:	f7ff fd97 	bl	8000eec <seg3_3>
            break;
 80013be:	e012      	b.n	80013e6 <set7seg3+0x7a>
        case 4:
            seg3_4();
 80013c0:	f7ff fdb2 	bl	8000f28 <seg3_4>
            break;
 80013c4:	e00f      	b.n	80013e6 <set7seg3+0x7a>
        case 5:
            seg3_5();
 80013c6:	f7ff fdcd 	bl	8000f64 <seg3_5>
            break;
 80013ca:	e00c      	b.n	80013e6 <set7seg3+0x7a>
        case 6:
            seg3_6();
 80013cc:	f7ff fde8 	bl	8000fa0 <seg3_6>
            break;
 80013d0:	e009      	b.n	80013e6 <set7seg3+0x7a>
        case 7:
            seg3_7();
 80013d2:	f7ff fe03 	bl	8000fdc <seg3_7>
            break;
 80013d6:	e006      	b.n	80013e6 <set7seg3+0x7a>
        case 8:
            seg3_8();
 80013d8:	f7ff fe1e 	bl	8001018 <seg3_8>
            break;
 80013dc:	e003      	b.n	80013e6 <set7seg3+0x7a>
        case 9:
            seg3_9();
 80013de:	f7ff fe39 	bl	8001054 <seg3_9>
            break;
 80013e2:	e000      	b.n	80013e6 <set7seg3+0x7a>
        default:
            break;
 80013e4:	bf00      	nop
    }
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop

080013f0 <set7seg4>:

void set7seg4(int value) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b09      	cmp	r3, #9
 80013fc:	d834      	bhi.n	8001468 <set7seg4+0x78>
 80013fe:	a201      	add	r2, pc, #4	; (adr r2, 8001404 <set7seg4+0x14>)
 8001400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001404:	0800142d 	.word	0x0800142d
 8001408:	08001433 	.word	0x08001433
 800140c:	08001439 	.word	0x08001439
 8001410:	0800143f 	.word	0x0800143f
 8001414:	08001445 	.word	0x08001445
 8001418:	0800144b 	.word	0x0800144b
 800141c:	08001451 	.word	0x08001451
 8001420:	08001457 	.word	0x08001457
 8001424:	0800145d 	.word	0x0800145d
 8001428:	08001463 	.word	0x08001463
    switch (value) {
        case 0:
            seg4_0();
 800142c:	f7ff fe30 	bl	8001090 <seg4_0>
            break;
 8001430:	e01b      	b.n	800146a <set7seg4+0x7a>
        case 1:
            seg4_1();
 8001432:	f7ff fe4b 	bl	80010cc <seg4_1>
            break;
 8001436:	e018      	b.n	800146a <set7seg4+0x7a>
        case 2:
            seg4_2();
 8001438:	f7ff fe66 	bl	8001108 <seg4_2>
            break;
 800143c:	e015      	b.n	800146a <set7seg4+0x7a>
        case 3:
            seg4_3();
 800143e:	f7ff fe81 	bl	8001144 <seg4_3>
            break;
 8001442:	e012      	b.n	800146a <set7seg4+0x7a>
        case 4:
            seg4_4();
 8001444:	f7ff fe9c 	bl	8001180 <seg4_4>
            break;
 8001448:	e00f      	b.n	800146a <set7seg4+0x7a>
        case 5:
            seg4_5();
 800144a:	f7ff feb7 	bl	80011bc <seg4_5>
            break;
 800144e:	e00c      	b.n	800146a <set7seg4+0x7a>
        case 6:
            seg4_6();
 8001450:	f7ff fed2 	bl	80011f8 <seg4_6>
            break;
 8001454:	e009      	b.n	800146a <set7seg4+0x7a>
        case 7:
            seg4_7();
 8001456:	f7ff feed 	bl	8001234 <seg4_7>
            break;
 800145a:	e006      	b.n	800146a <set7seg4+0x7a>
        case 8:
            seg4_8();
 800145c:	f7ff ff08 	bl	8001270 <seg4_8>
            break;
 8001460:	e003      	b.n	800146a <set7seg4+0x7a>
        case 9:
            seg4_9();
 8001462:	f7ff ff23 	bl	80012ac <seg4_9>
            break;
 8001466:	e000      	b.n	800146a <set7seg4+0x7a>
        default:
            break;
 8001468:	bf00      	nop
    }
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop

08001474 <led7_segment_display_2>:
		break;
	default:
		break;
	}
}
void led7_segment_display_2(int time){
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	switch (count_2) {
 800147c:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <led7_segment_display_2+0x60>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d002      	beq.n	800148a <led7_segment_display_2+0x16>
 8001484:	2b01      	cmp	r3, #1
 8001486:	d00e      	beq.n	80014a6 <led7_segment_display_2+0x32>
	case 1:
		set7seg4(time % 10);
		count_2 = 0;
		break;
	default:
		break;
 8001488:	e020      	b.n	80014cc <led7_segment_display_2+0x58>
		set7seg3(time / 10);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a12      	ldr	r2, [pc, #72]	; (80014d8 <led7_segment_display_2+0x64>)
 800148e:	fb82 1203 	smull	r1, r2, r2, r3
 8001492:	1092      	asrs	r2, r2, #2
 8001494:	17db      	asrs	r3, r3, #31
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ff67 	bl	800136c <set7seg3>
		count_2 = 1;
 800149e:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <led7_segment_display_2+0x60>)
 80014a0:	2201      	movs	r2, #1
 80014a2:	601a      	str	r2, [r3, #0]
		break;
 80014a4:	e012      	b.n	80014cc <led7_segment_display_2+0x58>
		set7seg4(time % 10);
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <led7_segment_display_2+0x64>)
 80014aa:	fb83 1302 	smull	r1, r3, r3, r2
 80014ae:	1099      	asrs	r1, r3, #2
 80014b0:	17d3      	asrs	r3, r2, #31
 80014b2:	1ac9      	subs	r1, r1, r3
 80014b4:	460b      	mov	r3, r1
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	440b      	add	r3, r1
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	1ad1      	subs	r1, r2, r3
 80014be:	4608      	mov	r0, r1
 80014c0:	f7ff ff96 	bl	80013f0 <set7seg4>
		count_2 = 0;
 80014c4:	4b03      	ldr	r3, [pc, #12]	; (80014d4 <led7_segment_display_2+0x60>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
		break;
 80014ca:	bf00      	nop
	}
}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	200000a0 	.word	0x200000a0
 80014d8:	66666667 	.word	0x66666667

080014dc <INIT_TIME>:
 */

#include "light_traffic.h"
#include "global.h"

void INIT_TIME(){
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
	red_time = 5;
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <INIT_TIME+0x20>)
 80014e2:	2205      	movs	r2, #5
 80014e4:	601a      	str	r2, [r3, #0]
	green_time = 3;
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <INIT_TIME+0x24>)
 80014e8:	2203      	movs	r2, #3
 80014ea:	601a      	str	r2, [r3, #0]
	yellow_time = 2;
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <INIT_TIME+0x28>)
 80014ee:	2202      	movs	r2, #2
 80014f0:	601a      	str	r2, [r3, #0]
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	200000a4 	.word	0x200000a4
 8001500:	200000a8 	.word	0x200000a8
 8001504:	200000ac 	.word	0x200000ac

08001508 <red1_green2>:
void red1_green2(){
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
	setRED1();
 800150c:	f7ff fb00 	bl	8000b10 <setRED1>
	setGREEN2();
 8001510:	f7ff fb5e 	bl	8000bd0 <setGREEN2>
}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}

08001518 <red1_yellow2>:
void red1_yellow2(){
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
	setRED1();
 800151c:	f7ff faf8 	bl	8000b10 <setRED1>
	setYELLOW2();
 8001520:	f7ff fb6e 	bl	8000c00 <setYELLOW2>
}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}

08001528 <green1_red2>:
void green1_red2(){
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
	setGREEN1();
 800152c:	f7ff fb08 	bl	8000b40 <setGREEN1>
	setRED2();
 8001530:	f7ff fb36 	bl	8000ba0 <setRED2>
}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}

08001538 <yellow1_red2>:
void yellow1_red2(){
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
	setYELLOW1();
 800153c:	f7ff fb18 	bl	8000b70 <setYELLOW1>
	setRED2();
 8001540:	f7ff fb2e 	bl	8000ba0 <setRED2>
}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}

08001548 <blinking_red>:

void blinking_red(){
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 800154c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001550:	4804      	ldr	r0, [pc, #16]	; (8001564 <blinking_red+0x1c>)
 8001552:	f000 fdd0 	bl	80020f6 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
 8001556:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800155a:	4802      	ldr	r0, [pc, #8]	; (8001564 <blinking_red+0x1c>)
 800155c:	f000 fdcb 	bl	80020f6 <HAL_GPIO_TogglePin>
}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40010c00 	.word	0x40010c00

08001568 <blinking_green>:
void blinking_green(){
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
 800156c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001570:	4804      	ldr	r0, [pc, #16]	; (8001584 <blinking_green+0x1c>)
 8001572:	f000 fdc0 	bl	80020f6 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
 8001576:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800157a:	4802      	ldr	r0, [pc, #8]	; (8001584 <blinking_green+0x1c>)
 800157c:	f000 fdbb 	bl	80020f6 <HAL_GPIO_TogglePin>
}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40010c00 	.word	0x40010c00

08001588 <blinking_yellow>:
void blinking_yellow(){
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin);
 800158c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001590:	4804      	ldr	r0, [pc, #16]	; (80015a4 <blinking_yellow+0x1c>)
 8001592:	f000 fdb0 	bl	80020f6 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin);
 8001596:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800159a:	4802      	ldr	r0, [pc, #8]	; (80015a4 <blinking_yellow+0x1c>)
 800159c:	f000 fdab 	bl	80020f6 <HAL_GPIO_TogglePin>
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40010c00 	.word	0x40010c00

080015a8 <testTimer_Led.6049>:

  HAL_TIM_Base_Start_IT (& htim2 ) ;

  //test timer
  setTimer(0, 500);
  void testTimer_Led(){
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	f8c7 c004 	str.w	ip, [r7, #4]
	  HAL_GPIO_WritePin(LED_5_1_GPIO_Port, LED_5_1_Pin, GPIO_PIN_RESET);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2120      	movs	r1, #32
 80015b6:	4811      	ldr	r0, [pc, #68]	; (80015fc <testTimer_Led.6049+0x54>)
 80015b8:	f000 fd85 	bl	80020c6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_5_2_GPIO_Port, LED_5_2_Pin, GPIO_PIN_RESET);
 80015bc:	2200      	movs	r2, #0
 80015be:	2140      	movs	r1, #64	; 0x40
 80015c0:	480e      	ldr	r0, [pc, #56]	; (80015fc <testTimer_Led.6049+0x54>)
 80015c2:	f000 fd80 	bl	80020c6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_5_3_GPIO_Port, LED_5_3_Pin, GPIO_PIN_RESET);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2180      	movs	r1, #128	; 0x80
 80015ca:	480c      	ldr	r0, [pc, #48]	; (80015fc <testTimer_Led.6049+0x54>)
 80015cc:	f000 fd7b 	bl	80020c6 <HAL_GPIO_WritePin>
	  if(timer_flag[0] == 1){
 80015d0:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <testTimer_Led.6049+0x58>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d10c      	bne.n	80015f2 <testTimer_Led.6049+0x4a>
		  HAL_GPIO_TogglePin(LED_Timer_GPIO_Port, LED_Timer_Pin);
 80015d8:	2101      	movs	r1, #1
 80015da:	4808      	ldr	r0, [pc, #32]	; (80015fc <testTimer_Led.6049+0x54>)
 80015dc:	f000 fd8b 	bl	80020f6 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LED_5_0_GPIO_Port, LED_5_0_Pin);
 80015e0:	2110      	movs	r1, #16
 80015e2:	4806      	ldr	r0, [pc, #24]	; (80015fc <testTimer_Led.6049+0x54>)
 80015e4:	f000 fd87 	bl	80020f6 <HAL_GPIO_TogglePin>
		  setTimer(0, 500);
 80015e8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80015ec:	2000      	movs	r0, #0
 80015ee:	f000 f9f9 	bl	80019e4 <setTimer>
	  }
  }
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40010c00 	.word	0x40010c00
 8001600:	2000012c 	.word	0x2000012c

08001604 <main>:
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
int main(void)
 800160a:	f107 0310 	add.w	r3, r7, #16
 800160e:	607b      	str	r3, [r7, #4]
  HAL_Init();
 8001610:	f000 fa58 	bl	8001ac4 <HAL_Init>
  SystemClock_Config();
 8001614:	f000 f844 	bl	80016a0 <SystemClock_Config>
  MX_GPIO_Init();
 8001618:	f000 f8ca 	bl	80017b0 <MX_GPIO_Init>
  MX_TIM2_Init();
 800161c:	f000 f87c 	bl	8001718 <MX_TIM2_Init>
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 8001620:	480c      	ldr	r0, [pc, #48]	; (8001654 <main+0x50>)
 8001622:	f001 f9ad 	bl	8002980 <HAL_TIM_Base_Start_IT>
  setTimer(0, 500);
 8001626:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800162a:	2000      	movs	r0, #0
 800162c:	f000 f9da 	bl	80019e4 <setTimer>
	  if(isButtonPressed(0) == 1){
		  HAL_GPIO_TogglePin(LED_Test_GPIO_Port, LED_Test_Pin);
	  }
  }

  status = INIT;
 8001630:	4b09      	ldr	r3, [pc, #36]	; (8001658 <main+0x54>)
 8001632:	2201      	movs	r2, #1
 8001634:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  //test LED_Timer 500ms
	  testTimer_Led();
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	469c      	mov	ip, r3
 800163a:	f7ff ffb5 	bl	80015a8 <testTimer_Led.6049>
	  //test button
	  testButton();
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	469c      	mov	ip, r3
 8001642:	f000 f80b 	bl	800165c <testButton.6051>



	  //main
	  fsm_automatic_run();
 8001646:	f7fe fe81 	bl	800034c <fsm_automatic_run>
	  fsm_manual_run();
 800164a:	f7fe ffb7 	bl	80005bc <fsm_manual_run>
	  fsm_setting_run();
 800164e:	f7ff f8e1 	bl	8000814 <fsm_setting_run>
	  testTimer_Led();
 8001652:	e7f0      	b.n	8001636 <main+0x32>
 8001654:	200000bc 	.word	0x200000bc
 8001658:	2000009c 	.word	0x2000009c

0800165c <testButton.6051>:
  void testButton(){
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	f8c7 c004 	str.w	ip, [r7, #4]
	  if(isButtonPressed(0) == 1){
 8001666:	2000      	movs	r0, #0
 8001668:	f7fe fd70 	bl	800014c <isButtonPressed>
 800166c:	4603      	mov	r3, r0
 800166e:	2b01      	cmp	r3, #1
 8001670:	d104      	bne.n	800167c <testButton.6051+0x20>
		  HAL_GPIO_TogglePin(LED_Test_GPIO_Port, LED_Test_Pin);
 8001672:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001676:	4803      	ldr	r0, [pc, #12]	; (8001684 <testButton.6051+0x28>)
 8001678:	f000 fd3d 	bl	80020f6 <HAL_GPIO_TogglePin>
  }
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40011000 	.word	0x40011000

08001688 <HAL_TIM_PeriodElapsedCallback>:
  }
}

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	timerRun();
 8001690:	f000 f9c6 	bl	8001a20 <timerRun>
	getKeyInput();
 8001694:	f7fe fd84 	bl	80001a0 <getKeyInput>
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b090      	sub	sp, #64	; 0x40
 80016a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016a6:	f107 0318 	add.w	r3, r7, #24
 80016aa:	2228      	movs	r2, #40	; 0x28
 80016ac:	2100      	movs	r1, #0
 80016ae:	4618      	mov	r0, r3
 80016b0:	f001 fd16 	bl	80030e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
 80016c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016c2:	2302      	movs	r3, #2
 80016c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016c6:	2301      	movs	r3, #1
 80016c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016ca:	2310      	movs	r3, #16
 80016cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016ce:	2300      	movs	r3, #0
 80016d0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d2:	f107 0318 	add.w	r3, r7, #24
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 fd26 	bl	8002128 <HAL_RCC_OscConfig>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80016e2:	f000 f8eb 	bl	80018bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016e6:	230f      	movs	r3, #15
 80016e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80016ea:	2300      	movs	r3, #0
 80016ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016fa:	1d3b      	adds	r3, r7, #4
 80016fc:	2100      	movs	r1, #0
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 ff92 	bl	8002628 <HAL_RCC_ClockConfig>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800170a:	f000 f8d7 	bl	80018bc <Error_Handler>
  }
}
 800170e:	bf00      	nop
 8001710:	3740      	adds	r7, #64	; 0x40
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800171e:	f107 0308 	add.w	r3, r7, #8
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800172c:	463b      	mov	r3, r7
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001734:	4b1d      	ldr	r3, [pc, #116]	; (80017ac <MX_TIM2_Init+0x94>)
 8001736:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800173a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800173c:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <MX_TIM2_Init+0x94>)
 800173e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001742:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001744:	4b19      	ldr	r3, [pc, #100]	; (80017ac <MX_TIM2_Init+0x94>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800174a:	4b18      	ldr	r3, [pc, #96]	; (80017ac <MX_TIM2_Init+0x94>)
 800174c:	2209      	movs	r2, #9
 800174e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001750:	4b16      	ldr	r3, [pc, #88]	; (80017ac <MX_TIM2_Init+0x94>)
 8001752:	2200      	movs	r2, #0
 8001754:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001756:	4b15      	ldr	r3, [pc, #84]	; (80017ac <MX_TIM2_Init+0x94>)
 8001758:	2200      	movs	r2, #0
 800175a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800175c:	4813      	ldr	r0, [pc, #76]	; (80017ac <MX_TIM2_Init+0x94>)
 800175e:	f001 f8bf 	bl	80028e0 <HAL_TIM_Base_Init>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001768:	f000 f8a8 	bl	80018bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800176c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001770:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001772:	f107 0308 	add.w	r3, r7, #8
 8001776:	4619      	mov	r1, r3
 8001778:	480c      	ldr	r0, [pc, #48]	; (80017ac <MX_TIM2_Init+0x94>)
 800177a:	f001 fa3d 	bl	8002bf8 <HAL_TIM_ConfigClockSource>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001784:	f000 f89a 	bl	80018bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001788:	2300      	movs	r3, #0
 800178a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800178c:	2300      	movs	r3, #0
 800178e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001790:	463b      	mov	r3, r7
 8001792:	4619      	mov	r1, r3
 8001794:	4805      	ldr	r0, [pc, #20]	; (80017ac <MX_TIM2_Init+0x94>)
 8001796:	f001 fc15 	bl	8002fc4 <HAL_TIMEx_MasterConfigSynchronization>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80017a0:	f000 f88c 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017a4:	bf00      	nop
 80017a6:	3718      	adds	r7, #24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	200000bc 	.word	0x200000bc

080017b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b088      	sub	sp, #32
 80017b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b6:	f107 0310 	add.w	r3, r7, #16
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c4:	4b39      	ldr	r3, [pc, #228]	; (80018ac <MX_GPIO_Init+0xfc>)
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	4a38      	ldr	r2, [pc, #224]	; (80018ac <MX_GPIO_Init+0xfc>)
 80017ca:	f043 0310 	orr.w	r3, r3, #16
 80017ce:	6193      	str	r3, [r2, #24]
 80017d0:	4b36      	ldr	r3, [pc, #216]	; (80018ac <MX_GPIO_Init+0xfc>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	f003 0310 	and.w	r3, r3, #16
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017dc:	4b33      	ldr	r3, [pc, #204]	; (80018ac <MX_GPIO_Init+0xfc>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	4a32      	ldr	r2, [pc, #200]	; (80018ac <MX_GPIO_Init+0xfc>)
 80017e2:	f043 0304 	orr.w	r3, r3, #4
 80017e6:	6193      	str	r3, [r2, #24]
 80017e8:	4b30      	ldr	r3, [pc, #192]	; (80018ac <MX_GPIO_Init+0xfc>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	f003 0304 	and.w	r3, r3, #4
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f4:	4b2d      	ldr	r3, [pc, #180]	; (80018ac <MX_GPIO_Init+0xfc>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	4a2c      	ldr	r2, [pc, #176]	; (80018ac <MX_GPIO_Init+0xfc>)
 80017fa:	f043 0308 	orr.w	r3, r3, #8
 80017fe:	6193      	str	r3, [r2, #24]
 8001800:	4b2a      	ldr	r3, [pc, #168]	; (80018ac <MX_GPIO_Init+0xfc>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	f003 0308 	and.w	r3, r3, #8
 8001808:	607b      	str	r3, [r7, #4]
 800180a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Test_GPIO_Port, LED_Test_Pin, GPIO_PIN_RESET);
 800180c:	2200      	movs	r2, #0
 800180e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001812:	4827      	ldr	r0, [pc, #156]	; (80018b0 <MX_GPIO_Init+0x100>)
 8001814:	f000 fc57 	bl	80020c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_0_Pin|LED_1_1_Pin|LED_1_2_Pin|LED_1_3_Pin
 8001818:	2200      	movs	r2, #0
 800181a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800181e:	4825      	ldr	r0, [pc, #148]	; (80018b4 <MX_GPIO_Init+0x104>)
 8001820:	f000 fc51 	bl	80020c6 <HAL_GPIO_WritePin>
                          |LED_2_0_Pin|LED_2_1_Pin|LED_2_2_Pin|LED_2_3_Pin
                          |LED_3_0_Pin|LED_3_1_Pin|LED_3_2_Pin|LED_3_3_Pin
                          |LED_4_0_Pin|LED_4_1_Pin|LED_4_2_Pin|LED_4_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Timer_Pin|LED_YELLOW1_Pin|LED_RED2_Pin|LED_GREEN2_Pin
 8001824:	2200      	movs	r2, #0
 8001826:	f647 71f1 	movw	r1, #32753	; 0x7ff1
 800182a:	4823      	ldr	r0, [pc, #140]	; (80018b8 <MX_GPIO_Init+0x108>)
 800182c:	f000 fc4b 	bl	80020c6 <HAL_GPIO_WritePin>
                          |LED_YELLOW2_Pin|LED_MOD_Pin|LED_5_0_Pin|LED_5_1_Pin
                          |LED_5_2_Pin|LED_5_3_Pin|LED_RED1_Pin|LED_GREEN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Test_Pin */
  GPIO_InitStruct.Pin = LED_Test_Pin;
 8001830:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001834:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001836:	2301      	movs	r3, #1
 8001838:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183e:	2302      	movs	r3, #2
 8001840:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_Test_GPIO_Port, &GPIO_InitStruct);
 8001842:	f107 0310 	add.w	r3, r7, #16
 8001846:	4619      	mov	r1, r3
 8001848:	4819      	ldr	r0, [pc, #100]	; (80018b0 <MX_GPIO_Init+0x100>)
 800184a:	f000 faab 	bl	8001da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_0_Pin LED_1_1_Pin LED_1_2_Pin LED_1_3_Pin
                           LED_2_0_Pin LED_2_1_Pin LED_2_2_Pin LED_2_3_Pin
                           LED_3_0_Pin LED_3_1_Pin LED_3_2_Pin LED_3_3_Pin
                           LED_4_0_Pin LED_4_1_Pin LED_4_2_Pin LED_4_3_Pin */
  GPIO_InitStruct.Pin = LED_1_0_Pin|LED_1_1_Pin|LED_1_2_Pin|LED_1_3_Pin
 800184e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001852:	613b      	str	r3, [r7, #16]
                          |LED_2_0_Pin|LED_2_1_Pin|LED_2_2_Pin|LED_2_3_Pin
                          |LED_3_0_Pin|LED_3_1_Pin|LED_3_2_Pin|LED_3_3_Pin
                          |LED_4_0_Pin|LED_4_1_Pin|LED_4_2_Pin|LED_4_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001854:	2301      	movs	r3, #1
 8001856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185c:	2302      	movs	r3, #2
 800185e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001860:	f107 0310 	add.w	r3, r7, #16
 8001864:	4619      	mov	r1, r3
 8001866:	4813      	ldr	r0, [pc, #76]	; (80018b4 <MX_GPIO_Init+0x104>)
 8001868:	f000 fa9c 	bl	8001da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Timer_Pin LED_YELLOW1_Pin LED_RED2_Pin LED_GREEN2_Pin
                           LED_YELLOW2_Pin LED_MOD_Pin LED_5_0_Pin LED_5_1_Pin
                           LED_5_2_Pin LED_5_3_Pin LED_RED1_Pin LED_GREEN1_Pin */
  GPIO_InitStruct.Pin = LED_Timer_Pin|LED_YELLOW1_Pin|LED_RED2_Pin|LED_GREEN2_Pin
 800186c:	f647 73f1 	movw	r3, #32753	; 0x7ff1
 8001870:	613b      	str	r3, [r7, #16]
                          |LED_YELLOW2_Pin|LED_MOD_Pin|LED_5_0_Pin|LED_5_1_Pin
                          |LED_5_2_Pin|LED_5_3_Pin|LED_RED1_Pin|LED_GREEN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001872:	2301      	movs	r3, #1
 8001874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187a:	2302      	movs	r3, #2
 800187c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187e:	f107 0310 	add.w	r3, r7, #16
 8001882:	4619      	mov	r1, r3
 8001884:	480c      	ldr	r0, [pc, #48]	; (80018b8 <MX_GPIO_Init+0x108>)
 8001886:	f000 fa8d 	bl	8001da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button_Test_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button_Test_Pin|Button3_Pin;
 800188a:	f248 030e 	movw	r3, #32782	; 0x800e
 800188e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001894:	2301      	movs	r3, #1
 8001896:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001898:	f107 0310 	add.w	r3, r7, #16
 800189c:	4619      	mov	r1, r3
 800189e:	4806      	ldr	r0, [pc, #24]	; (80018b8 <MX_GPIO_Init+0x108>)
 80018a0:	f000 fa80 	bl	8001da4 <HAL_GPIO_Init>

}
 80018a4:	bf00      	nop
 80018a6:	3720      	adds	r7, #32
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40021000 	.word	0x40021000
 80018b0:	40011000 	.word	0x40011000
 80018b4:	40010800 	.word	0x40010800
 80018b8:	40010c00 	.word	0x40010c00

080018bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018c0:	b672      	cpsid	i
}
 80018c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018c4:	e7fe      	b.n	80018c4 <Error_Handler+0x8>
	...

080018c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018ce:	4b15      	ldr	r3, [pc, #84]	; (8001924 <HAL_MspInit+0x5c>)
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	4a14      	ldr	r2, [pc, #80]	; (8001924 <HAL_MspInit+0x5c>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6193      	str	r3, [r2, #24]
 80018da:	4b12      	ldr	r3, [pc, #72]	; (8001924 <HAL_MspInit+0x5c>)
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	60bb      	str	r3, [r7, #8]
 80018e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e6:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <HAL_MspInit+0x5c>)
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	4a0e      	ldr	r2, [pc, #56]	; (8001924 <HAL_MspInit+0x5c>)
 80018ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f0:	61d3      	str	r3, [r2, #28]
 80018f2:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <HAL_MspInit+0x5c>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fa:	607b      	str	r3, [r7, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80018fe:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <HAL_MspInit+0x60>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	4a04      	ldr	r2, [pc, #16]	; (8001928 <HAL_MspInit+0x60>)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800191a:	bf00      	nop
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr
 8001924:	40021000 	.word	0x40021000
 8001928:	40010000 	.word	0x40010000

0800192c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800193c:	d113      	bne.n	8001966 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800193e:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <HAL_TIM_Base_MspInit+0x44>)
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	4a0b      	ldr	r2, [pc, #44]	; (8001970 <HAL_TIM_Base_MspInit+0x44>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	61d3      	str	r3, [r2, #28]
 800194a:	4b09      	ldr	r3, [pc, #36]	; (8001970 <HAL_TIM_Base_MspInit+0x44>)
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001956:	2200      	movs	r2, #0
 8001958:	2100      	movs	r1, #0
 800195a:	201c      	movs	r0, #28
 800195c:	f000 f9eb 	bl	8001d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001960:	201c      	movs	r0, #28
 8001962:	f000 fa04 	bl	8001d6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001966:	bf00      	nop
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40021000 	.word	0x40021000

08001974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001978:	e7fe      	b.n	8001978 <NMI_Handler+0x4>

0800197a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800197e:	e7fe      	b.n	800197e <HardFault_Handler+0x4>

08001980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001984:	e7fe      	b.n	8001984 <MemManage_Handler+0x4>

08001986 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800198a:	e7fe      	b.n	800198a <BusFault_Handler+0x4>

0800198c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001990:	e7fe      	b.n	8001990 <UsageFault_Handler+0x4>

08001992 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr

0800199e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr

080019aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr

080019b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ba:	f000 f8c9 	bl	8001b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019c8:	4802      	ldr	r0, [pc, #8]	; (80019d4 <TIM2_IRQHandler+0x10>)
 80019ca:	f001 f825 	bl	8002a18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	200000bc 	.word	0x200000bc

080019d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr

080019e4 <setTimer>:
#include "timerlab3.h"

int timer_flag[10];
int timer_counter[10];
int timer_cycle = 10;
void setTimer(int index, int counter) {
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
	timer_flag[index] = 0;
 80019ee:	4a09      	ldr	r2, [pc, #36]	; (8001a14 <setTimer+0x30>)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2100      	movs	r1, #0
 80019f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_counter[index] = counter / timer_cycle;
 80019f8:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <setTimer+0x34>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	fb92 f2f3 	sdiv	r2, r2, r3
 8001a02:	4906      	ldr	r1, [pc, #24]	; (8001a1c <setTimer+0x38>)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr
 8001a14:	2000012c 	.word	0x2000012c
 8001a18:	20000064 	.word	0x20000064
 8001a1c:	20000104 	.word	0x20000104

08001a20 <timerRun>:
void timerRun() {
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
	for (int i = 0; i < 10; i++) {
 8001a26:	2300      	movs	r3, #0
 8001a28:	607b      	str	r3, [r7, #4]
 8001a2a:	e017      	b.n	8001a5c <timerRun+0x3c>
		if (timer_counter[i] > 0) {
 8001a2c:	4a10      	ldr	r2, [pc, #64]	; (8001a70 <timerRun+0x50>)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	dd09      	ble.n	8001a4c <timerRun+0x2c>
			timer_counter[i]--;
 8001a38:	4a0d      	ldr	r2, [pc, #52]	; (8001a70 <timerRun+0x50>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a40:	1e5a      	subs	r2, r3, #1
 8001a42:	490b      	ldr	r1, [pc, #44]	; (8001a70 <timerRun+0x50>)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001a4a:	e004      	b.n	8001a56 <timerRun+0x36>
		} else {
			timer_flag[i] = 1;
 8001a4c:	4a09      	ldr	r2, [pc, #36]	; (8001a74 <timerRun+0x54>)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2101      	movs	r1, #1
 8001a52:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++) {
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b09      	cmp	r3, #9
 8001a60:	dde4      	ble.n	8001a2c <timerRun+0xc>
		}
	}
}
 8001a62:	bf00      	nop
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	20000104 	.word	0x20000104
 8001a74:	2000012c 	.word	0x2000012c

08001a78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a78:	f7ff ffae 	bl	80019d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a7c:	480b      	ldr	r0, [pc, #44]	; (8001aac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a7e:	490c      	ldr	r1, [pc, #48]	; (8001ab0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a80:	4a0c      	ldr	r2, [pc, #48]	; (8001ab4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a84:	e002      	b.n	8001a8c <LoopCopyDataInit>

08001a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a8a:	3304      	adds	r3, #4

08001a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a90:	d3f9      	bcc.n	8001a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a92:	4a09      	ldr	r2, [pc, #36]	; (8001ab8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a94:	4c09      	ldr	r4, [pc, #36]	; (8001abc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a98:	e001      	b.n	8001a9e <LoopFillZerobss>

08001a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a9c:	3204      	adds	r2, #4

08001a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aa0:	d3fb      	bcc.n	8001a9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aa2:	f001 faf9 	bl	8003098 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001aa6:	f7ff fdad 	bl	8001604 <main>
  bx lr
 8001aaa:	4770      	bx	lr
  ldr r0, =_sdata
 8001aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ab0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001ab4:	08003134 	.word	0x08003134
  ldr r2, =_sbss
 8001ab8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001abc:	20000158 	.word	0x20000158

08001ac0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ac0:	e7fe      	b.n	8001ac0 <ADC1_2_IRQHandler>
	...

08001ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac8:	4b08      	ldr	r3, [pc, #32]	; (8001aec <HAL_Init+0x28>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a07      	ldr	r2, [pc, #28]	; (8001aec <HAL_Init+0x28>)
 8001ace:	f043 0310 	orr.w	r3, r3, #16
 8001ad2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad4:	2003      	movs	r0, #3
 8001ad6:	f000 f923 	bl	8001d20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ada:	200f      	movs	r0, #15
 8001adc:	f000 f808 	bl	8001af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ae0:	f7ff fef2 	bl	80018c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40022000 	.word	0x40022000

08001af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <HAL_InitTick+0x54>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <HAL_InitTick+0x58>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	4619      	mov	r1, r3
 8001b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 f93b 	bl	8001d8a <HAL_SYSTICK_Config>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e00e      	b.n	8001b3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b0f      	cmp	r3, #15
 8001b22:	d80a      	bhi.n	8001b3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b24:	2200      	movs	r2, #0
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	f04f 30ff 	mov.w	r0, #4294967295
 8001b2c:	f000 f903 	bl	8001d36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b30:	4a06      	ldr	r2, [pc, #24]	; (8001b4c <HAL_InitTick+0x5c>)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	e000      	b.n	8001b3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000060 	.word	0x20000060
 8001b48:	2000006c 	.word	0x2000006c
 8001b4c:	20000068 	.word	0x20000068

08001b50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b54:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <HAL_IncTick+0x1c>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <HAL_IncTick+0x20>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4413      	add	r3, r2
 8001b60:	4a03      	ldr	r2, [pc, #12]	; (8001b70 <HAL_IncTick+0x20>)
 8001b62:	6013      	str	r3, [r2, #0]
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr
 8001b6c:	2000006c 	.word	0x2000006c
 8001b70:	20000154 	.word	0x20000154

08001b74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return uwTick;
 8001b78:	4b02      	ldr	r3, [pc, #8]	; (8001b84 <HAL_GetTick+0x10>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr
 8001b84:	20000154 	.word	0x20000154

08001b88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b98:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <__NVIC_SetPriorityGrouping+0x44>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b9e:	68ba      	ldr	r2, [r7, #8]
 8001ba0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bba:	4a04      	ldr	r2, [pc, #16]	; (8001bcc <__NVIC_SetPriorityGrouping+0x44>)
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	60d3      	str	r3, [r2, #12]
}
 8001bc0:	bf00      	nop
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bc80      	pop	{r7}
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd4:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <__NVIC_GetPriorityGrouping+0x18>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	0a1b      	lsrs	r3, r3, #8
 8001bda:	f003 0307 	and.w	r3, r3, #7
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	db0b      	blt.n	8001c16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	f003 021f 	and.w	r2, r3, #31
 8001c04:	4906      	ldr	r1, [pc, #24]	; (8001c20 <__NVIC_EnableIRQ+0x34>)
 8001c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0a:	095b      	lsrs	r3, r3, #5
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr
 8001c20:	e000e100 	.word	0xe000e100

08001c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	6039      	str	r1, [r7, #0]
 8001c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	db0a      	blt.n	8001c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	490c      	ldr	r1, [pc, #48]	; (8001c70 <__NVIC_SetPriority+0x4c>)
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	0112      	lsls	r2, r2, #4
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	440b      	add	r3, r1
 8001c48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c4c:	e00a      	b.n	8001c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	4908      	ldr	r1, [pc, #32]	; (8001c74 <__NVIC_SetPriority+0x50>)
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	3b04      	subs	r3, #4
 8001c5c:	0112      	lsls	r2, r2, #4
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	440b      	add	r3, r1
 8001c62:	761a      	strb	r2, [r3, #24]
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	e000e100 	.word	0xe000e100
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b089      	sub	sp, #36	; 0x24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	f1c3 0307 	rsb	r3, r3, #7
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	bf28      	it	cs
 8001c96:	2304      	movcs	r3, #4
 8001c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	2b06      	cmp	r3, #6
 8001ca0:	d902      	bls.n	8001ca8 <NVIC_EncodePriority+0x30>
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3b03      	subs	r3, #3
 8001ca6:	e000      	b.n	8001caa <NVIC_EncodePriority+0x32>
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cac:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43da      	mvns	r2, r3
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	401a      	ands	r2, r3
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cca:	43d9      	mvns	r1, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd0:	4313      	orrs	r3, r2
         );
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3724      	adds	r7, #36	; 0x24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr

08001cdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cec:	d301      	bcc.n	8001cf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e00f      	b.n	8001d12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cf2:	4a0a      	ldr	r2, [pc, #40]	; (8001d1c <SysTick_Config+0x40>)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cfa:	210f      	movs	r1, #15
 8001cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001d00:	f7ff ff90 	bl	8001c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d04:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <SysTick_Config+0x40>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d0a:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <SysTick_Config+0x40>)
 8001d0c:	2207      	movs	r2, #7
 8001d0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	e000e010 	.word	0xe000e010

08001d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff ff2d 	bl	8001b88 <__NVIC_SetPriorityGrouping>
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b086      	sub	sp, #24
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	60b9      	str	r1, [r7, #8]
 8001d40:	607a      	str	r2, [r7, #4]
 8001d42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d48:	f7ff ff42 	bl	8001bd0 <__NVIC_GetPriorityGrouping>
 8001d4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	68b9      	ldr	r1, [r7, #8]
 8001d52:	6978      	ldr	r0, [r7, #20]
 8001d54:	f7ff ff90 	bl	8001c78 <NVIC_EncodePriority>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d5e:	4611      	mov	r1, r2
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff ff5f 	bl	8001c24 <__NVIC_SetPriority>
}
 8001d66:	bf00      	nop
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	4603      	mov	r3, r0
 8001d76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff ff35 	bl	8001bec <__NVIC_EnableIRQ>
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff ffa2 	bl	8001cdc <SysTick_Config>
 8001d98:	4603      	mov	r3, r0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
	...

08001da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b08b      	sub	sp, #44	; 0x2c
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dae:	2300      	movs	r3, #0
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001db2:	2300      	movs	r3, #0
 8001db4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001db6:	e148      	b.n	800204a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001db8:	2201      	movs	r2, #1
 8001dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	69fa      	ldr	r2, [r7, #28]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	f040 8137 	bne.w	8002044 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	4aa3      	ldr	r2, [pc, #652]	; (8002068 <HAL_GPIO_Init+0x2c4>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d05e      	beq.n	8001e9e <HAL_GPIO_Init+0xfa>
 8001de0:	4aa1      	ldr	r2, [pc, #644]	; (8002068 <HAL_GPIO_Init+0x2c4>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d875      	bhi.n	8001ed2 <HAL_GPIO_Init+0x12e>
 8001de6:	4aa1      	ldr	r2, [pc, #644]	; (800206c <HAL_GPIO_Init+0x2c8>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d058      	beq.n	8001e9e <HAL_GPIO_Init+0xfa>
 8001dec:	4a9f      	ldr	r2, [pc, #636]	; (800206c <HAL_GPIO_Init+0x2c8>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d86f      	bhi.n	8001ed2 <HAL_GPIO_Init+0x12e>
 8001df2:	4a9f      	ldr	r2, [pc, #636]	; (8002070 <HAL_GPIO_Init+0x2cc>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d052      	beq.n	8001e9e <HAL_GPIO_Init+0xfa>
 8001df8:	4a9d      	ldr	r2, [pc, #628]	; (8002070 <HAL_GPIO_Init+0x2cc>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d869      	bhi.n	8001ed2 <HAL_GPIO_Init+0x12e>
 8001dfe:	4a9d      	ldr	r2, [pc, #628]	; (8002074 <HAL_GPIO_Init+0x2d0>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d04c      	beq.n	8001e9e <HAL_GPIO_Init+0xfa>
 8001e04:	4a9b      	ldr	r2, [pc, #620]	; (8002074 <HAL_GPIO_Init+0x2d0>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d863      	bhi.n	8001ed2 <HAL_GPIO_Init+0x12e>
 8001e0a:	4a9b      	ldr	r2, [pc, #620]	; (8002078 <HAL_GPIO_Init+0x2d4>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d046      	beq.n	8001e9e <HAL_GPIO_Init+0xfa>
 8001e10:	4a99      	ldr	r2, [pc, #612]	; (8002078 <HAL_GPIO_Init+0x2d4>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d85d      	bhi.n	8001ed2 <HAL_GPIO_Init+0x12e>
 8001e16:	2b12      	cmp	r3, #18
 8001e18:	d82a      	bhi.n	8001e70 <HAL_GPIO_Init+0xcc>
 8001e1a:	2b12      	cmp	r3, #18
 8001e1c:	d859      	bhi.n	8001ed2 <HAL_GPIO_Init+0x12e>
 8001e1e:	a201      	add	r2, pc, #4	; (adr r2, 8001e24 <HAL_GPIO_Init+0x80>)
 8001e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e24:	08001e9f 	.word	0x08001e9f
 8001e28:	08001e79 	.word	0x08001e79
 8001e2c:	08001e8b 	.word	0x08001e8b
 8001e30:	08001ecd 	.word	0x08001ecd
 8001e34:	08001ed3 	.word	0x08001ed3
 8001e38:	08001ed3 	.word	0x08001ed3
 8001e3c:	08001ed3 	.word	0x08001ed3
 8001e40:	08001ed3 	.word	0x08001ed3
 8001e44:	08001ed3 	.word	0x08001ed3
 8001e48:	08001ed3 	.word	0x08001ed3
 8001e4c:	08001ed3 	.word	0x08001ed3
 8001e50:	08001ed3 	.word	0x08001ed3
 8001e54:	08001ed3 	.word	0x08001ed3
 8001e58:	08001ed3 	.word	0x08001ed3
 8001e5c:	08001ed3 	.word	0x08001ed3
 8001e60:	08001ed3 	.word	0x08001ed3
 8001e64:	08001ed3 	.word	0x08001ed3
 8001e68:	08001e81 	.word	0x08001e81
 8001e6c:	08001e95 	.word	0x08001e95
 8001e70:	4a82      	ldr	r2, [pc, #520]	; (800207c <HAL_GPIO_Init+0x2d8>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d013      	beq.n	8001e9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e76:	e02c      	b.n	8001ed2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	623b      	str	r3, [r7, #32]
          break;
 8001e7e:	e029      	b.n	8001ed4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	3304      	adds	r3, #4
 8001e86:	623b      	str	r3, [r7, #32]
          break;
 8001e88:	e024      	b.n	8001ed4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	3308      	adds	r3, #8
 8001e90:	623b      	str	r3, [r7, #32]
          break;
 8001e92:	e01f      	b.n	8001ed4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	330c      	adds	r3, #12
 8001e9a:	623b      	str	r3, [r7, #32]
          break;
 8001e9c:	e01a      	b.n	8001ed4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d102      	bne.n	8001eac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ea6:	2304      	movs	r3, #4
 8001ea8:	623b      	str	r3, [r7, #32]
          break;
 8001eaa:	e013      	b.n	8001ed4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d105      	bne.n	8001ec0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001eb4:	2308      	movs	r3, #8
 8001eb6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69fa      	ldr	r2, [r7, #28]
 8001ebc:	611a      	str	r2, [r3, #16]
          break;
 8001ebe:	e009      	b.n	8001ed4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ec0:	2308      	movs	r3, #8
 8001ec2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	69fa      	ldr	r2, [r7, #28]
 8001ec8:	615a      	str	r2, [r3, #20]
          break;
 8001eca:	e003      	b.n	8001ed4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	623b      	str	r3, [r7, #32]
          break;
 8001ed0:	e000      	b.n	8001ed4 <HAL_GPIO_Init+0x130>
          break;
 8001ed2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	2bff      	cmp	r3, #255	; 0xff
 8001ed8:	d801      	bhi.n	8001ede <HAL_GPIO_Init+0x13a>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	e001      	b.n	8001ee2 <HAL_GPIO_Init+0x13e>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	2bff      	cmp	r3, #255	; 0xff
 8001ee8:	d802      	bhi.n	8001ef0 <HAL_GPIO_Init+0x14c>
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	e002      	b.n	8001ef6 <HAL_GPIO_Init+0x152>
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef2:	3b08      	subs	r3, #8
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	210f      	movs	r1, #15
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	fa01 f303 	lsl.w	r3, r1, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	401a      	ands	r2, r3
 8001f08:	6a39      	ldr	r1, [r7, #32]
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f10:	431a      	orrs	r2, r3
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 8090 	beq.w	8002044 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f24:	4b56      	ldr	r3, [pc, #344]	; (8002080 <HAL_GPIO_Init+0x2dc>)
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	4a55      	ldr	r2, [pc, #340]	; (8002080 <HAL_GPIO_Init+0x2dc>)
 8001f2a:	f043 0301 	orr.w	r3, r3, #1
 8001f2e:	6193      	str	r3, [r2, #24]
 8001f30:	4b53      	ldr	r3, [pc, #332]	; (8002080 <HAL_GPIO_Init+0x2dc>)
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	60bb      	str	r3, [r7, #8]
 8001f3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f3c:	4a51      	ldr	r2, [pc, #324]	; (8002084 <HAL_GPIO_Init+0x2e0>)
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	089b      	lsrs	r3, r3, #2
 8001f42:	3302      	adds	r3, #2
 8001f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	f003 0303 	and.w	r3, r3, #3
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	220f      	movs	r2, #15
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a49      	ldr	r2, [pc, #292]	; (8002088 <HAL_GPIO_Init+0x2e4>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d00d      	beq.n	8001f84 <HAL_GPIO_Init+0x1e0>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a48      	ldr	r2, [pc, #288]	; (800208c <HAL_GPIO_Init+0x2e8>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d007      	beq.n	8001f80 <HAL_GPIO_Init+0x1dc>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a47      	ldr	r2, [pc, #284]	; (8002090 <HAL_GPIO_Init+0x2ec>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d101      	bne.n	8001f7c <HAL_GPIO_Init+0x1d8>
 8001f78:	2302      	movs	r3, #2
 8001f7a:	e004      	b.n	8001f86 <HAL_GPIO_Init+0x1e2>
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e002      	b.n	8001f86 <HAL_GPIO_Init+0x1e2>
 8001f80:	2301      	movs	r3, #1
 8001f82:	e000      	b.n	8001f86 <HAL_GPIO_Init+0x1e2>
 8001f84:	2300      	movs	r3, #0
 8001f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f88:	f002 0203 	and.w	r2, r2, #3
 8001f8c:	0092      	lsls	r2, r2, #2
 8001f8e:	4093      	lsls	r3, r2
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f96:	493b      	ldr	r1, [pc, #236]	; (8002084 <HAL_GPIO_Init+0x2e0>)
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	089b      	lsrs	r3, r3, #2
 8001f9c:	3302      	adds	r3, #2
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d006      	beq.n	8001fbe <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fb0:	4b38      	ldr	r3, [pc, #224]	; (8002094 <HAL_GPIO_Init+0x2f0>)
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	4937      	ldr	r1, [pc, #220]	; (8002094 <HAL_GPIO_Init+0x2f0>)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	608b      	str	r3, [r1, #8]
 8001fbc:	e006      	b.n	8001fcc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fbe:	4b35      	ldr	r3, [pc, #212]	; (8002094 <HAL_GPIO_Init+0x2f0>)
 8001fc0:	689a      	ldr	r2, [r3, #8]
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	4933      	ldr	r1, [pc, #204]	; (8002094 <HAL_GPIO_Init+0x2f0>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d006      	beq.n	8001fe6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fd8:	4b2e      	ldr	r3, [pc, #184]	; (8002094 <HAL_GPIO_Init+0x2f0>)
 8001fda:	68da      	ldr	r2, [r3, #12]
 8001fdc:	492d      	ldr	r1, [pc, #180]	; (8002094 <HAL_GPIO_Init+0x2f0>)
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	60cb      	str	r3, [r1, #12]
 8001fe4:	e006      	b.n	8001ff4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fe6:	4b2b      	ldr	r3, [pc, #172]	; (8002094 <HAL_GPIO_Init+0x2f0>)
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	43db      	mvns	r3, r3
 8001fee:	4929      	ldr	r1, [pc, #164]	; (8002094 <HAL_GPIO_Init+0x2f0>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d006      	beq.n	800200e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002000:	4b24      	ldr	r3, [pc, #144]	; (8002094 <HAL_GPIO_Init+0x2f0>)
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	4923      	ldr	r1, [pc, #140]	; (8002094 <HAL_GPIO_Init+0x2f0>)
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	4313      	orrs	r3, r2
 800200a:	604b      	str	r3, [r1, #4]
 800200c:	e006      	b.n	800201c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800200e:	4b21      	ldr	r3, [pc, #132]	; (8002094 <HAL_GPIO_Init+0x2f0>)
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	43db      	mvns	r3, r3
 8002016:	491f      	ldr	r1, [pc, #124]	; (8002094 <HAL_GPIO_Init+0x2f0>)
 8002018:	4013      	ands	r3, r2
 800201a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d006      	beq.n	8002036 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002028:	4b1a      	ldr	r3, [pc, #104]	; (8002094 <HAL_GPIO_Init+0x2f0>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	4919      	ldr	r1, [pc, #100]	; (8002094 <HAL_GPIO_Init+0x2f0>)
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	4313      	orrs	r3, r2
 8002032:	600b      	str	r3, [r1, #0]
 8002034:	e006      	b.n	8002044 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002036:	4b17      	ldr	r3, [pc, #92]	; (8002094 <HAL_GPIO_Init+0x2f0>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	43db      	mvns	r3, r3
 800203e:	4915      	ldr	r1, [pc, #84]	; (8002094 <HAL_GPIO_Init+0x2f0>)
 8002040:	4013      	ands	r3, r2
 8002042:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	3301      	adds	r3, #1
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	fa22 f303 	lsr.w	r3, r2, r3
 8002054:	2b00      	cmp	r3, #0
 8002056:	f47f aeaf 	bne.w	8001db8 <HAL_GPIO_Init+0x14>
  }
}
 800205a:	bf00      	nop
 800205c:	bf00      	nop
 800205e:	372c      	adds	r7, #44	; 0x2c
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	10320000 	.word	0x10320000
 800206c:	10310000 	.word	0x10310000
 8002070:	10220000 	.word	0x10220000
 8002074:	10210000 	.word	0x10210000
 8002078:	10120000 	.word	0x10120000
 800207c:	10110000 	.word	0x10110000
 8002080:	40021000 	.word	0x40021000
 8002084:	40010000 	.word	0x40010000
 8002088:	40010800 	.word	0x40010800
 800208c:	40010c00 	.word	0x40010c00
 8002090:	40011000 	.word	0x40011000
 8002094:	40010400 	.word	0x40010400

08002098 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	460b      	mov	r3, r1
 80020a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	887b      	ldrh	r3, [r7, #2]
 80020aa:	4013      	ands	r3, r2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d002      	beq.n	80020b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020b0:	2301      	movs	r3, #1
 80020b2:	73fb      	strb	r3, [r7, #15]
 80020b4:	e001      	b.n	80020ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020b6:	2300      	movs	r3, #0
 80020b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bc80      	pop	{r7}
 80020c4:	4770      	bx	lr

080020c6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
 80020ce:	460b      	mov	r3, r1
 80020d0:	807b      	strh	r3, [r7, #2]
 80020d2:	4613      	mov	r3, r2
 80020d4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020d6:	787b      	ldrb	r3, [r7, #1]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020dc:	887a      	ldrh	r2, [r7, #2]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020e2:	e003      	b.n	80020ec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020e4:	887b      	ldrh	r3, [r7, #2]
 80020e6:	041a      	lsls	r2, r3, #16
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	611a      	str	r2, [r3, #16]
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bc80      	pop	{r7}
 80020f4:	4770      	bx	lr

080020f6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020f6:	b480      	push	{r7}
 80020f8:	b085      	sub	sp, #20
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
 80020fe:	460b      	mov	r3, r1
 8002100:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002108:	887a      	ldrh	r2, [r7, #2]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	4013      	ands	r3, r2
 800210e:	041a      	lsls	r2, r3, #16
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	43d9      	mvns	r1, r3
 8002114:	887b      	ldrh	r3, [r7, #2]
 8002116:	400b      	ands	r3, r1
 8002118:	431a      	orrs	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	611a      	str	r2, [r3, #16]
}
 800211e:	bf00      	nop
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr

08002128 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e26c      	b.n	8002614 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	f000 8087 	beq.w	8002256 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002148:	4b92      	ldr	r3, [pc, #584]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 030c 	and.w	r3, r3, #12
 8002150:	2b04      	cmp	r3, #4
 8002152:	d00c      	beq.n	800216e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002154:	4b8f      	ldr	r3, [pc, #572]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f003 030c 	and.w	r3, r3, #12
 800215c:	2b08      	cmp	r3, #8
 800215e:	d112      	bne.n	8002186 <HAL_RCC_OscConfig+0x5e>
 8002160:	4b8c      	ldr	r3, [pc, #560]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800216c:	d10b      	bne.n	8002186 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800216e:	4b89      	ldr	r3, [pc, #548]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d06c      	beq.n	8002254 <HAL_RCC_OscConfig+0x12c>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d168      	bne.n	8002254 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e246      	b.n	8002614 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800218e:	d106      	bne.n	800219e <HAL_RCC_OscConfig+0x76>
 8002190:	4b80      	ldr	r3, [pc, #512]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a7f      	ldr	r2, [pc, #508]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219a:	6013      	str	r3, [r2, #0]
 800219c:	e02e      	b.n	80021fc <HAL_RCC_OscConfig+0xd4>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10c      	bne.n	80021c0 <HAL_RCC_OscConfig+0x98>
 80021a6:	4b7b      	ldr	r3, [pc, #492]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a7a      	ldr	r2, [pc, #488]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	4b78      	ldr	r3, [pc, #480]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a77      	ldr	r2, [pc, #476]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021bc:	6013      	str	r3, [r2, #0]
 80021be:	e01d      	b.n	80021fc <HAL_RCC_OscConfig+0xd4>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021c8:	d10c      	bne.n	80021e4 <HAL_RCC_OscConfig+0xbc>
 80021ca:	4b72      	ldr	r3, [pc, #456]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a71      	ldr	r2, [pc, #452]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	4b6f      	ldr	r3, [pc, #444]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a6e      	ldr	r2, [pc, #440]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e0:	6013      	str	r3, [r2, #0]
 80021e2:	e00b      	b.n	80021fc <HAL_RCC_OscConfig+0xd4>
 80021e4:	4b6b      	ldr	r3, [pc, #428]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a6a      	ldr	r2, [pc, #424]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ee:	6013      	str	r3, [r2, #0]
 80021f0:	4b68      	ldr	r3, [pc, #416]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a67      	ldr	r2, [pc, #412]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d013      	beq.n	800222c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002204:	f7ff fcb6 	bl	8001b74 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800220c:	f7ff fcb2 	bl	8001b74 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b64      	cmp	r3, #100	; 0x64
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e1fa      	b.n	8002614 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800221e:	4b5d      	ldr	r3, [pc, #372]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0f0      	beq.n	800220c <HAL_RCC_OscConfig+0xe4>
 800222a:	e014      	b.n	8002256 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222c:	f7ff fca2 	bl	8001b74 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002234:	f7ff fc9e 	bl	8001b74 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b64      	cmp	r3, #100	; 0x64
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e1e6      	b.n	8002614 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002246:	4b53      	ldr	r3, [pc, #332]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f0      	bne.n	8002234 <HAL_RCC_OscConfig+0x10c>
 8002252:	e000      	b.n	8002256 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002254:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d063      	beq.n	800232a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002262:	4b4c      	ldr	r3, [pc, #304]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f003 030c 	and.w	r3, r3, #12
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00b      	beq.n	8002286 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800226e:	4b49      	ldr	r3, [pc, #292]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f003 030c 	and.w	r3, r3, #12
 8002276:	2b08      	cmp	r3, #8
 8002278:	d11c      	bne.n	80022b4 <HAL_RCC_OscConfig+0x18c>
 800227a:	4b46      	ldr	r3, [pc, #280]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d116      	bne.n	80022b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002286:	4b43      	ldr	r3, [pc, #268]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d005      	beq.n	800229e <HAL_RCC_OscConfig+0x176>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d001      	beq.n	800229e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e1ba      	b.n	8002614 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800229e:	4b3d      	ldr	r3, [pc, #244]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	4939      	ldr	r1, [pc, #228]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b2:	e03a      	b.n	800232a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d020      	beq.n	80022fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022bc:	4b36      	ldr	r3, [pc, #216]	; (8002398 <HAL_RCC_OscConfig+0x270>)
 80022be:	2201      	movs	r2, #1
 80022c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c2:	f7ff fc57 	bl	8001b74 <HAL_GetTick>
 80022c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c8:	e008      	b.n	80022dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ca:	f7ff fc53 	bl	8001b74 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e19b      	b.n	8002614 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022dc:	4b2d      	ldr	r3, [pc, #180]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0f0      	beq.n	80022ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e8:	4b2a      	ldr	r3, [pc, #168]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	4927      	ldr	r1, [pc, #156]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	600b      	str	r3, [r1, #0]
 80022fc:	e015      	b.n	800232a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022fe:	4b26      	ldr	r3, [pc, #152]	; (8002398 <HAL_RCC_OscConfig+0x270>)
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002304:	f7ff fc36 	bl	8001b74 <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800230c:	f7ff fc32 	bl	8001b74 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e17a      	b.n	8002614 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800231e:	4b1d      	ldr	r3, [pc, #116]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f0      	bne.n	800230c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b00      	cmp	r3, #0
 8002334:	d03a      	beq.n	80023ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d019      	beq.n	8002372 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800233e:	4b17      	ldr	r3, [pc, #92]	; (800239c <HAL_RCC_OscConfig+0x274>)
 8002340:	2201      	movs	r2, #1
 8002342:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002344:	f7ff fc16 	bl	8001b74 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800234c:	f7ff fc12 	bl	8001b74 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e15a      	b.n	8002614 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800235e:	4b0d      	ldr	r3, [pc, #52]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d0f0      	beq.n	800234c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800236a:	2001      	movs	r0, #1
 800236c:	f000 fa9a 	bl	80028a4 <RCC_Delay>
 8002370:	e01c      	b.n	80023ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002372:	4b0a      	ldr	r3, [pc, #40]	; (800239c <HAL_RCC_OscConfig+0x274>)
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002378:	f7ff fbfc 	bl	8001b74 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800237e:	e00f      	b.n	80023a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002380:	f7ff fbf8 	bl	8001b74 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d908      	bls.n	80023a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e140      	b.n	8002614 <HAL_RCC_OscConfig+0x4ec>
 8002392:	bf00      	nop
 8002394:	40021000 	.word	0x40021000
 8002398:	42420000 	.word	0x42420000
 800239c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a0:	4b9e      	ldr	r3, [pc, #632]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1e9      	bne.n	8002380 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 80a6 	beq.w	8002506 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ba:	2300      	movs	r3, #0
 80023bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023be:	4b97      	ldr	r3, [pc, #604]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10d      	bne.n	80023e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ca:	4b94      	ldr	r3, [pc, #592]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	4a93      	ldr	r2, [pc, #588]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 80023d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d4:	61d3      	str	r3, [r2, #28]
 80023d6:	4b91      	ldr	r3, [pc, #580]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	60bb      	str	r3, [r7, #8]
 80023e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023e2:	2301      	movs	r3, #1
 80023e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e6:	4b8e      	ldr	r3, [pc, #568]	; (8002620 <HAL_RCC_OscConfig+0x4f8>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d118      	bne.n	8002424 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023f2:	4b8b      	ldr	r3, [pc, #556]	; (8002620 <HAL_RCC_OscConfig+0x4f8>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a8a      	ldr	r2, [pc, #552]	; (8002620 <HAL_RCC_OscConfig+0x4f8>)
 80023f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023fe:	f7ff fbb9 	bl	8001b74 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002406:	f7ff fbb5 	bl	8001b74 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b64      	cmp	r3, #100	; 0x64
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e0fd      	b.n	8002614 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002418:	4b81      	ldr	r3, [pc, #516]	; (8002620 <HAL_RCC_OscConfig+0x4f8>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0f0      	beq.n	8002406 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d106      	bne.n	800243a <HAL_RCC_OscConfig+0x312>
 800242c:	4b7b      	ldr	r3, [pc, #492]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	4a7a      	ldr	r2, [pc, #488]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 8002432:	f043 0301 	orr.w	r3, r3, #1
 8002436:	6213      	str	r3, [r2, #32]
 8002438:	e02d      	b.n	8002496 <HAL_RCC_OscConfig+0x36e>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10c      	bne.n	800245c <HAL_RCC_OscConfig+0x334>
 8002442:	4b76      	ldr	r3, [pc, #472]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	4a75      	ldr	r2, [pc, #468]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 8002448:	f023 0301 	bic.w	r3, r3, #1
 800244c:	6213      	str	r3, [r2, #32]
 800244e:	4b73      	ldr	r3, [pc, #460]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	4a72      	ldr	r2, [pc, #456]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 8002454:	f023 0304 	bic.w	r3, r3, #4
 8002458:	6213      	str	r3, [r2, #32]
 800245a:	e01c      	b.n	8002496 <HAL_RCC_OscConfig+0x36e>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	2b05      	cmp	r3, #5
 8002462:	d10c      	bne.n	800247e <HAL_RCC_OscConfig+0x356>
 8002464:	4b6d      	ldr	r3, [pc, #436]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	4a6c      	ldr	r2, [pc, #432]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 800246a:	f043 0304 	orr.w	r3, r3, #4
 800246e:	6213      	str	r3, [r2, #32]
 8002470:	4b6a      	ldr	r3, [pc, #424]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	4a69      	ldr	r2, [pc, #420]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 8002476:	f043 0301 	orr.w	r3, r3, #1
 800247a:	6213      	str	r3, [r2, #32]
 800247c:	e00b      	b.n	8002496 <HAL_RCC_OscConfig+0x36e>
 800247e:	4b67      	ldr	r3, [pc, #412]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	4a66      	ldr	r2, [pc, #408]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 8002484:	f023 0301 	bic.w	r3, r3, #1
 8002488:	6213      	str	r3, [r2, #32]
 800248a:	4b64      	ldr	r3, [pc, #400]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	4a63      	ldr	r2, [pc, #396]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 8002490:	f023 0304 	bic.w	r3, r3, #4
 8002494:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d015      	beq.n	80024ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800249e:	f7ff fb69 	bl	8001b74 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a4:	e00a      	b.n	80024bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024a6:	f7ff fb65 	bl	8001b74 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e0ab      	b.n	8002614 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024bc:	4b57      	ldr	r3, [pc, #348]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0ee      	beq.n	80024a6 <HAL_RCC_OscConfig+0x37e>
 80024c8:	e014      	b.n	80024f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ca:	f7ff fb53 	bl	8001b74 <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d0:	e00a      	b.n	80024e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d2:	f7ff fb4f 	bl	8001b74 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e095      	b.n	8002614 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e8:	4b4c      	ldr	r3, [pc, #304]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1ee      	bne.n	80024d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024f4:	7dfb      	ldrb	r3, [r7, #23]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d105      	bne.n	8002506 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024fa:	4b48      	ldr	r3, [pc, #288]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	4a47      	ldr	r2, [pc, #284]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 8002500:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002504:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 8081 	beq.w	8002612 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002510:	4b42      	ldr	r3, [pc, #264]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 030c 	and.w	r3, r3, #12
 8002518:	2b08      	cmp	r3, #8
 800251a:	d061      	beq.n	80025e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	69db      	ldr	r3, [r3, #28]
 8002520:	2b02      	cmp	r3, #2
 8002522:	d146      	bne.n	80025b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002524:	4b3f      	ldr	r3, [pc, #252]	; (8002624 <HAL_RCC_OscConfig+0x4fc>)
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252a:	f7ff fb23 	bl	8001b74 <HAL_GetTick>
 800252e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002530:	e008      	b.n	8002544 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002532:	f7ff fb1f 	bl	8001b74 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e067      	b.n	8002614 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002544:	4b35      	ldr	r3, [pc, #212]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1f0      	bne.n	8002532 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002558:	d108      	bne.n	800256c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800255a:	4b30      	ldr	r3, [pc, #192]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	492d      	ldr	r1, [pc, #180]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 8002568:	4313      	orrs	r3, r2
 800256a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800256c:	4b2b      	ldr	r3, [pc, #172]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a19      	ldr	r1, [r3, #32]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	430b      	orrs	r3, r1
 800257e:	4927      	ldr	r1, [pc, #156]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 8002580:	4313      	orrs	r3, r2
 8002582:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002584:	4b27      	ldr	r3, [pc, #156]	; (8002624 <HAL_RCC_OscConfig+0x4fc>)
 8002586:	2201      	movs	r2, #1
 8002588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258a:	f7ff faf3 	bl	8001b74 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002592:	f7ff faef 	bl	8001b74 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e037      	b.n	8002614 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025a4:	4b1d      	ldr	r3, [pc, #116]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0f0      	beq.n	8002592 <HAL_RCC_OscConfig+0x46a>
 80025b0:	e02f      	b.n	8002612 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b2:	4b1c      	ldr	r3, [pc, #112]	; (8002624 <HAL_RCC_OscConfig+0x4fc>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b8:	f7ff fadc 	bl	8001b74 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c0:	f7ff fad8 	bl	8001b74 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e020      	b.n	8002614 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d2:	4b12      	ldr	r3, [pc, #72]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f0      	bne.n	80025c0 <HAL_RCC_OscConfig+0x498>
 80025de:	e018      	b.n	8002612 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	69db      	ldr	r3, [r3, #28]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d101      	bne.n	80025ec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e013      	b.n	8002614 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025ec:	4b0b      	ldr	r3, [pc, #44]	; (800261c <HAL_RCC_OscConfig+0x4f4>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d106      	bne.n	800260e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800260a:	429a      	cmp	r2, r3
 800260c:	d001      	beq.n	8002612 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3718      	adds	r7, #24
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40021000 	.word	0x40021000
 8002620:	40007000 	.word	0x40007000
 8002624:	42420060 	.word	0x42420060

08002628 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e0d0      	b.n	80027de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800263c:	4b6a      	ldr	r3, [pc, #424]	; (80027e8 <HAL_RCC_ClockConfig+0x1c0>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d910      	bls.n	800266c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264a:	4b67      	ldr	r3, [pc, #412]	; (80027e8 <HAL_RCC_ClockConfig+0x1c0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f023 0207 	bic.w	r2, r3, #7
 8002652:	4965      	ldr	r1, [pc, #404]	; (80027e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	4313      	orrs	r3, r2
 8002658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800265a:	4b63      	ldr	r3, [pc, #396]	; (80027e8 <HAL_RCC_ClockConfig+0x1c0>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	429a      	cmp	r2, r3
 8002666:	d001      	beq.n	800266c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e0b8      	b.n	80027de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d020      	beq.n	80026ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	d005      	beq.n	8002690 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002684:	4b59      	ldr	r3, [pc, #356]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	4a58      	ldr	r2, [pc, #352]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 800268a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800268e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0308 	and.w	r3, r3, #8
 8002698:	2b00      	cmp	r3, #0
 800269a:	d005      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800269c:	4b53      	ldr	r3, [pc, #332]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	4a52      	ldr	r2, [pc, #328]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 80026a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026a8:	4b50      	ldr	r3, [pc, #320]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	494d      	ldr	r1, [pc, #308]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d040      	beq.n	8002748 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d107      	bne.n	80026de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ce:	4b47      	ldr	r3, [pc, #284]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d115      	bne.n	8002706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e07f      	b.n	80027de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d107      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e6:	4b41      	ldr	r3, [pc, #260]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d109      	bne.n	8002706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e073      	b.n	80027de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f6:	4b3d      	ldr	r3, [pc, #244]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e06b      	b.n	80027de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002706:	4b39      	ldr	r3, [pc, #228]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f023 0203 	bic.w	r2, r3, #3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	4936      	ldr	r1, [pc, #216]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 8002714:	4313      	orrs	r3, r2
 8002716:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002718:	f7ff fa2c 	bl	8001b74 <HAL_GetTick>
 800271c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800271e:	e00a      	b.n	8002736 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002720:	f7ff fa28 	bl	8001b74 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	f241 3288 	movw	r2, #5000	; 0x1388
 800272e:	4293      	cmp	r3, r2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e053      	b.n	80027de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002736:	4b2d      	ldr	r3, [pc, #180]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f003 020c 	and.w	r2, r3, #12
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	429a      	cmp	r2, r3
 8002746:	d1eb      	bne.n	8002720 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002748:	4b27      	ldr	r3, [pc, #156]	; (80027e8 <HAL_RCC_ClockConfig+0x1c0>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	d210      	bcs.n	8002778 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002756:	4b24      	ldr	r3, [pc, #144]	; (80027e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f023 0207 	bic.w	r2, r3, #7
 800275e:	4922      	ldr	r1, [pc, #136]	; (80027e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	4313      	orrs	r3, r2
 8002764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002766:	4b20      	ldr	r3, [pc, #128]	; (80027e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	429a      	cmp	r2, r3
 8002772:	d001      	beq.n	8002778 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e032      	b.n	80027de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	2b00      	cmp	r3, #0
 8002782:	d008      	beq.n	8002796 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002784:	4b19      	ldr	r3, [pc, #100]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	4916      	ldr	r1, [pc, #88]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 8002792:	4313      	orrs	r3, r2
 8002794:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0308 	and.w	r3, r3, #8
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d009      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027a2:	4b12      	ldr	r3, [pc, #72]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	490e      	ldr	r1, [pc, #56]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027b6:	f000 f821 	bl	80027fc <HAL_RCC_GetSysClockFreq>
 80027ba:	4602      	mov	r2, r0
 80027bc:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	091b      	lsrs	r3, r3, #4
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	490a      	ldr	r1, [pc, #40]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 80027c8:	5ccb      	ldrb	r3, [r1, r3]
 80027ca:	fa22 f303 	lsr.w	r3, r2, r3
 80027ce:	4a09      	ldr	r2, [pc, #36]	; (80027f4 <HAL_RCC_ClockConfig+0x1cc>)
 80027d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027d2:	4b09      	ldr	r3, [pc, #36]	; (80027f8 <HAL_RCC_ClockConfig+0x1d0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff f98a 	bl	8001af0 <HAL_InitTick>

  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40022000 	.word	0x40022000
 80027ec:	40021000 	.word	0x40021000
 80027f0:	08003108 	.word	0x08003108
 80027f4:	20000060 	.word	0x20000060
 80027f8:	20000068 	.word	0x20000068

080027fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b087      	sub	sp, #28
 8002800:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002802:	2300      	movs	r3, #0
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	2300      	movs	r3, #0
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	2300      	movs	r3, #0
 800280c:	617b      	str	r3, [r7, #20]
 800280e:	2300      	movs	r3, #0
 8002810:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002812:	2300      	movs	r3, #0
 8002814:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002816:	4b1e      	ldr	r3, [pc, #120]	; (8002890 <HAL_RCC_GetSysClockFreq+0x94>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f003 030c 	and.w	r3, r3, #12
 8002822:	2b04      	cmp	r3, #4
 8002824:	d002      	beq.n	800282c <HAL_RCC_GetSysClockFreq+0x30>
 8002826:	2b08      	cmp	r3, #8
 8002828:	d003      	beq.n	8002832 <HAL_RCC_GetSysClockFreq+0x36>
 800282a:	e027      	b.n	800287c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800282c:	4b19      	ldr	r3, [pc, #100]	; (8002894 <HAL_RCC_GetSysClockFreq+0x98>)
 800282e:	613b      	str	r3, [r7, #16]
      break;
 8002830:	e027      	b.n	8002882 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	0c9b      	lsrs	r3, r3, #18
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	4a17      	ldr	r2, [pc, #92]	; (8002898 <HAL_RCC_GetSysClockFreq+0x9c>)
 800283c:	5cd3      	ldrb	r3, [r2, r3]
 800283e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d010      	beq.n	800286c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800284a:	4b11      	ldr	r3, [pc, #68]	; (8002890 <HAL_RCC_GetSysClockFreq+0x94>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	0c5b      	lsrs	r3, r3, #17
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	4a11      	ldr	r2, [pc, #68]	; (800289c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002856:	5cd3      	ldrb	r3, [r2, r3]
 8002858:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a0d      	ldr	r2, [pc, #52]	; (8002894 <HAL_RCC_GetSysClockFreq+0x98>)
 800285e:	fb02 f203 	mul.w	r2, r2, r3
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	fbb2 f3f3 	udiv	r3, r2, r3
 8002868:	617b      	str	r3, [r7, #20]
 800286a:	e004      	b.n	8002876 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a0c      	ldr	r2, [pc, #48]	; (80028a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002870:	fb02 f303 	mul.w	r3, r2, r3
 8002874:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	613b      	str	r3, [r7, #16]
      break;
 800287a:	e002      	b.n	8002882 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800287c:	4b05      	ldr	r3, [pc, #20]	; (8002894 <HAL_RCC_GetSysClockFreq+0x98>)
 800287e:	613b      	str	r3, [r7, #16]
      break;
 8002880:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002882:	693b      	ldr	r3, [r7, #16]
}
 8002884:	4618      	mov	r0, r3
 8002886:	371c      	adds	r7, #28
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	40021000 	.word	0x40021000
 8002894:	007a1200 	.word	0x007a1200
 8002898:	08003118 	.word	0x08003118
 800289c:	08003128 	.word	0x08003128
 80028a0:	003d0900 	.word	0x003d0900

080028a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028ac:	4b0a      	ldr	r3, [pc, #40]	; (80028d8 <RCC_Delay+0x34>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a0a      	ldr	r2, [pc, #40]	; (80028dc <RCC_Delay+0x38>)
 80028b2:	fba2 2303 	umull	r2, r3, r2, r3
 80028b6:	0a5b      	lsrs	r3, r3, #9
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	fb02 f303 	mul.w	r3, r2, r3
 80028be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028c0:	bf00      	nop
  }
  while (Delay --);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	1e5a      	subs	r2, r3, #1
 80028c6:	60fa      	str	r2, [r7, #12]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1f9      	bne.n	80028c0 <RCC_Delay+0x1c>
}
 80028cc:	bf00      	nop
 80028ce:	bf00      	nop
 80028d0:	3714      	adds	r7, #20
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr
 80028d8:	20000060 	.word	0x20000060
 80028dc:	10624dd3 	.word	0x10624dd3

080028e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e041      	b.n	8002976 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d106      	bne.n	800290c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7ff f810 	bl	800192c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2202      	movs	r2, #2
 8002910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3304      	adds	r3, #4
 800291c:	4619      	mov	r1, r3
 800291e:	4610      	mov	r0, r2
 8002920:	f000 fa56 	bl	8002dd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
	...

08002980 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b01      	cmp	r3, #1
 8002992:	d001      	beq.n	8002998 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e035      	b.n	8002a04 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0201 	orr.w	r2, r2, #1
 80029ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a16      	ldr	r2, [pc, #88]	; (8002a10 <HAL_TIM_Base_Start_IT+0x90>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d009      	beq.n	80029ce <HAL_TIM_Base_Start_IT+0x4e>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c2:	d004      	beq.n	80029ce <HAL_TIM_Base_Start_IT+0x4e>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a12      	ldr	r2, [pc, #72]	; (8002a14 <HAL_TIM_Base_Start_IT+0x94>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d111      	bne.n	80029f2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2b06      	cmp	r3, #6
 80029de:	d010      	beq.n	8002a02 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f042 0201 	orr.w	r2, r2, #1
 80029ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f0:	e007      	b.n	8002a02 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f042 0201 	orr.w	r2, r2, #1
 8002a00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	40012c00 	.word	0x40012c00
 8002a14:	40000400 	.word	0x40000400

08002a18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d020      	beq.n	8002a7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d01b      	beq.n	8002a7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f06f 0202 	mvn.w	r2, #2
 8002a4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2201      	movs	r2, #1
 8002a52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	f003 0303 	and.w	r3, r3, #3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 f998 	bl	8002d98 <HAL_TIM_IC_CaptureCallback>
 8002a68:	e005      	b.n	8002a76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f98b 	bl	8002d86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 f99a 	bl	8002daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	f003 0304 	and.w	r3, r3, #4
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d020      	beq.n	8002ac8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d01b      	beq.n	8002ac8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f06f 0204 	mvn.w	r2, #4
 8002a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f972 	bl	8002d98 <HAL_TIM_IC_CaptureCallback>
 8002ab4:	e005      	b.n	8002ac2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f965 	bl	8002d86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 f974 	bl	8002daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d020      	beq.n	8002b14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f003 0308 	and.w	r3, r3, #8
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d01b      	beq.n	8002b14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f06f 0208 	mvn.w	r2, #8
 8002ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2204      	movs	r2, #4
 8002aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	f003 0303 	and.w	r3, r3, #3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f94c 	bl	8002d98 <HAL_TIM_IC_CaptureCallback>
 8002b00:	e005      	b.n	8002b0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f93f 	bl	8002d86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 f94e 	bl	8002daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	f003 0310 	and.w	r3, r3, #16
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d020      	beq.n	8002b60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f003 0310 	and.w	r3, r3, #16
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d01b      	beq.n	8002b60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f06f 0210 	mvn.w	r2, #16
 8002b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2208      	movs	r2, #8
 8002b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f926 	bl	8002d98 <HAL_TIM_IC_CaptureCallback>
 8002b4c:	e005      	b.n	8002b5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f919 	bl	8002d86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 f928 	bl	8002daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00c      	beq.n	8002b84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d007      	beq.n	8002b84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f06f 0201 	mvn.w	r2, #1
 8002b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7fe fd82 	bl	8001688 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00c      	beq.n	8002ba8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d007      	beq.n	8002ba8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 fa6f 	bl	8003086 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00c      	beq.n	8002bcc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d007      	beq.n	8002bcc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f8f8 	bl	8002dbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	f003 0320 	and.w	r3, r3, #32
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00c      	beq.n	8002bf0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f003 0320 	and.w	r3, r3, #32
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d007      	beq.n	8002bf0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f06f 0220 	mvn.w	r2, #32
 8002be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 fa42 	bl	8003074 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bf0:	bf00      	nop
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c02:	2300      	movs	r3, #0
 8002c04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d101      	bne.n	8002c14 <HAL_TIM_ConfigClockSource+0x1c>
 8002c10:	2302      	movs	r3, #2
 8002c12:	e0b4      	b.n	8002d7e <HAL_TIM_ConfigClockSource+0x186>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2202      	movs	r2, #2
 8002c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68ba      	ldr	r2, [r7, #8]
 8002c42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c4c:	d03e      	beq.n	8002ccc <HAL_TIM_ConfigClockSource+0xd4>
 8002c4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c52:	f200 8087 	bhi.w	8002d64 <HAL_TIM_ConfigClockSource+0x16c>
 8002c56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c5a:	f000 8086 	beq.w	8002d6a <HAL_TIM_ConfigClockSource+0x172>
 8002c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c62:	d87f      	bhi.n	8002d64 <HAL_TIM_ConfigClockSource+0x16c>
 8002c64:	2b70      	cmp	r3, #112	; 0x70
 8002c66:	d01a      	beq.n	8002c9e <HAL_TIM_ConfigClockSource+0xa6>
 8002c68:	2b70      	cmp	r3, #112	; 0x70
 8002c6a:	d87b      	bhi.n	8002d64 <HAL_TIM_ConfigClockSource+0x16c>
 8002c6c:	2b60      	cmp	r3, #96	; 0x60
 8002c6e:	d050      	beq.n	8002d12 <HAL_TIM_ConfigClockSource+0x11a>
 8002c70:	2b60      	cmp	r3, #96	; 0x60
 8002c72:	d877      	bhi.n	8002d64 <HAL_TIM_ConfigClockSource+0x16c>
 8002c74:	2b50      	cmp	r3, #80	; 0x50
 8002c76:	d03c      	beq.n	8002cf2 <HAL_TIM_ConfigClockSource+0xfa>
 8002c78:	2b50      	cmp	r3, #80	; 0x50
 8002c7a:	d873      	bhi.n	8002d64 <HAL_TIM_ConfigClockSource+0x16c>
 8002c7c:	2b40      	cmp	r3, #64	; 0x40
 8002c7e:	d058      	beq.n	8002d32 <HAL_TIM_ConfigClockSource+0x13a>
 8002c80:	2b40      	cmp	r3, #64	; 0x40
 8002c82:	d86f      	bhi.n	8002d64 <HAL_TIM_ConfigClockSource+0x16c>
 8002c84:	2b30      	cmp	r3, #48	; 0x30
 8002c86:	d064      	beq.n	8002d52 <HAL_TIM_ConfigClockSource+0x15a>
 8002c88:	2b30      	cmp	r3, #48	; 0x30
 8002c8a:	d86b      	bhi.n	8002d64 <HAL_TIM_ConfigClockSource+0x16c>
 8002c8c:	2b20      	cmp	r3, #32
 8002c8e:	d060      	beq.n	8002d52 <HAL_TIM_ConfigClockSource+0x15a>
 8002c90:	2b20      	cmp	r3, #32
 8002c92:	d867      	bhi.n	8002d64 <HAL_TIM_ConfigClockSource+0x16c>
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d05c      	beq.n	8002d52 <HAL_TIM_ConfigClockSource+0x15a>
 8002c98:	2b10      	cmp	r3, #16
 8002c9a:	d05a      	beq.n	8002d52 <HAL_TIM_ConfigClockSource+0x15a>
 8002c9c:	e062      	b.n	8002d64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6818      	ldr	r0, [r3, #0]
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	6899      	ldr	r1, [r3, #8]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f000 f96a 	bl	8002f86 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002cc0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	609a      	str	r2, [r3, #8]
      break;
 8002cca:	e04f      	b.n	8002d6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6818      	ldr	r0, [r3, #0]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	6899      	ldr	r1, [r3, #8]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f000 f953 	bl	8002f86 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689a      	ldr	r2, [r3, #8]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cee:	609a      	str	r2, [r3, #8]
      break;
 8002cf0:	e03c      	b.n	8002d6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6818      	ldr	r0, [r3, #0]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	6859      	ldr	r1, [r3, #4]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	f000 f8ca 	bl	8002e98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2150      	movs	r1, #80	; 0x50
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 f921 	bl	8002f52 <TIM_ITRx_SetConfig>
      break;
 8002d10:	e02c      	b.n	8002d6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6818      	ldr	r0, [r3, #0]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	6859      	ldr	r1, [r3, #4]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	f000 f8e8 	bl	8002ef4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2160      	movs	r1, #96	; 0x60
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 f911 	bl	8002f52 <TIM_ITRx_SetConfig>
      break;
 8002d30:	e01c      	b.n	8002d6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6818      	ldr	r0, [r3, #0]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	6859      	ldr	r1, [r3, #4]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	f000 f8aa 	bl	8002e98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2140      	movs	r1, #64	; 0x40
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 f901 	bl	8002f52 <TIM_ITRx_SetConfig>
      break;
 8002d50:	e00c      	b.n	8002d6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4610      	mov	r0, r2
 8002d5e:	f000 f8f8 	bl	8002f52 <TIM_ITRx_SetConfig>
      break;
 8002d62:	e003      	b.n	8002d6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	73fb      	strb	r3, [r7, #15]
      break;
 8002d68:	e000      	b.n	8002d6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b083      	sub	sp, #12
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr

08002d98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bc80      	pop	{r7}
 8002da8:	4770      	bx	lr

08002daa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr

08002dbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bc80      	pop	{r7}
 8002dcc:	4770      	bx	lr
	...

08002dd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a2b      	ldr	r2, [pc, #172]	; (8002e90 <TIM_Base_SetConfig+0xc0>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d007      	beq.n	8002df8 <TIM_Base_SetConfig+0x28>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dee:	d003      	beq.n	8002df8 <TIM_Base_SetConfig+0x28>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a28      	ldr	r2, [pc, #160]	; (8002e94 <TIM_Base_SetConfig+0xc4>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d108      	bne.n	8002e0a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a20      	ldr	r2, [pc, #128]	; (8002e90 <TIM_Base_SetConfig+0xc0>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d007      	beq.n	8002e22 <TIM_Base_SetConfig+0x52>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e18:	d003      	beq.n	8002e22 <TIM_Base_SetConfig+0x52>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a1d      	ldr	r2, [pc, #116]	; (8002e94 <TIM_Base_SetConfig+0xc4>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d108      	bne.n	8002e34 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a0d      	ldr	r2, [pc, #52]	; (8002e90 <TIM_Base_SetConfig+0xc0>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d103      	bne.n	8002e68 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	691a      	ldr	r2, [r3, #16]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d005      	beq.n	8002e86 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	f023 0201 	bic.w	r2, r3, #1
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	611a      	str	r2, [r3, #16]
  }
}
 8002e86:	bf00      	nop
 8002e88:	3714      	adds	r7, #20
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc80      	pop	{r7}
 8002e8e:	4770      	bx	lr
 8002e90:	40012c00 	.word	0x40012c00
 8002e94:	40000400 	.word	0x40000400

08002e98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b087      	sub	sp, #28
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	f023 0201 	bic.w	r2, r3, #1
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ec2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	011b      	lsls	r3, r3, #4
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	f023 030a 	bic.w	r3, r3, #10
 8002ed4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	621a      	str	r2, [r3, #32]
}
 8002eea:	bf00      	nop
 8002eec:	371c      	adds	r7, #28
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr

08002ef4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b087      	sub	sp, #28
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	f023 0210 	bic.w	r2, r3, #16
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	031b      	lsls	r3, r3, #12
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f30:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	011b      	lsls	r3, r3, #4
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	621a      	str	r2, [r3, #32]
}
 8002f48:	bf00      	nop
 8002f4a:	371c      	adds	r7, #28
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bc80      	pop	{r7}
 8002f50:	4770      	bx	lr

08002f52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b085      	sub	sp, #20
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	f043 0307 	orr.w	r3, r3, #7
 8002f74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	609a      	str	r2, [r3, #8]
}
 8002f7c:	bf00      	nop
 8002f7e:	3714      	adds	r7, #20
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bc80      	pop	{r7}
 8002f84:	4770      	bx	lr

08002f86 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f86:	b480      	push	{r7}
 8002f88:	b087      	sub	sp, #28
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	60f8      	str	r0, [r7, #12]
 8002f8e:	60b9      	str	r1, [r7, #8]
 8002f90:	607a      	str	r2, [r7, #4]
 8002f92:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fa0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	021a      	lsls	r2, r3, #8
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	609a      	str	r2, [r3, #8]
}
 8002fba:	bf00      	nop
 8002fbc:	371c      	adds	r7, #28
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc80      	pop	{r7}
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	e041      	b.n	8003060 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003002:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	4313      	orrs	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a14      	ldr	r2, [pc, #80]	; (800306c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d009      	beq.n	8003034 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003028:	d004      	beq.n	8003034 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a10      	ldr	r2, [pc, #64]	; (8003070 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d10c      	bne.n	800304e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800303a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	68ba      	ldr	r2, [r7, #8]
 8003042:	4313      	orrs	r3, r2
 8003044:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3714      	adds	r7, #20
 8003064:	46bd      	mov	sp, r7
 8003066:	bc80      	pop	{r7}
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	40012c00 	.word	0x40012c00
 8003070:	40000400 	.word	0x40000400

08003074 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	bc80      	pop	{r7}
 8003084:	4770      	bx	lr

08003086 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003086:	b480      	push	{r7}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr

08003098 <__libc_init_array>:
 8003098:	b570      	push	{r4, r5, r6, lr}
 800309a:	2600      	movs	r6, #0
 800309c:	4d0c      	ldr	r5, [pc, #48]	; (80030d0 <__libc_init_array+0x38>)
 800309e:	4c0d      	ldr	r4, [pc, #52]	; (80030d4 <__libc_init_array+0x3c>)
 80030a0:	1b64      	subs	r4, r4, r5
 80030a2:	10a4      	asrs	r4, r4, #2
 80030a4:	42a6      	cmp	r6, r4
 80030a6:	d109      	bne.n	80030bc <__libc_init_array+0x24>
 80030a8:	f000 f822 	bl	80030f0 <_init>
 80030ac:	2600      	movs	r6, #0
 80030ae:	4d0a      	ldr	r5, [pc, #40]	; (80030d8 <__libc_init_array+0x40>)
 80030b0:	4c0a      	ldr	r4, [pc, #40]	; (80030dc <__libc_init_array+0x44>)
 80030b2:	1b64      	subs	r4, r4, r5
 80030b4:	10a4      	asrs	r4, r4, #2
 80030b6:	42a6      	cmp	r6, r4
 80030b8:	d105      	bne.n	80030c6 <__libc_init_array+0x2e>
 80030ba:	bd70      	pop	{r4, r5, r6, pc}
 80030bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80030c0:	4798      	blx	r3
 80030c2:	3601      	adds	r6, #1
 80030c4:	e7ee      	b.n	80030a4 <__libc_init_array+0xc>
 80030c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80030ca:	4798      	blx	r3
 80030cc:	3601      	adds	r6, #1
 80030ce:	e7f2      	b.n	80030b6 <__libc_init_array+0x1e>
 80030d0:	0800312c 	.word	0x0800312c
 80030d4:	0800312c 	.word	0x0800312c
 80030d8:	0800312c 	.word	0x0800312c
 80030dc:	08003130 	.word	0x08003130

080030e0 <memset>:
 80030e0:	4603      	mov	r3, r0
 80030e2:	4402      	add	r2, r0
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d100      	bne.n	80030ea <memset+0xa>
 80030e8:	4770      	bx	lr
 80030ea:	f803 1b01 	strb.w	r1, [r3], #1
 80030ee:	e7f9      	b.n	80030e4 <memset+0x4>

080030f0 <_init>:
 80030f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030f2:	bf00      	nop
 80030f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030f6:	bc08      	pop	{r3}
 80030f8:	469e      	mov	lr, r3
 80030fa:	4770      	bx	lr

080030fc <_fini>:
 80030fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fe:	bf00      	nop
 8003100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003102:	bc08      	pop	{r3}
 8003104:	469e      	mov	lr, r3
 8003106:	4770      	bx	lr
